import{_ as e,o as a,c as i,e as t}from"./app-iv9USOQR.js";const s={},d=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>我们在日常开发中经常使用 Git 管理代码, 每个人在各自的分支开发代码, 开发完毕后在 Gitlab/Github 上提交 MR/PR, 最后点击 merge 按钮即将代码合并至主分支...</p><p>在稍微学习 Git 相关的知识后, 我们会发现 Git 代码合并的方法绝不仅此一种, 不同的代码合并方式之间有什么差异？各自又适用于什么样的场景？我将在这篇文章为大家展开聊聊这些话题。</p><h2 id="不同的代码合并方式" tabindex="-1"><a class="header-anchor" href="#不同的代码合并方式"><span>不同的代码合并方式</span></a></h2><h3 id="_1-merge" tabindex="-1"><a class="header-anchor" href="#_1-merge"><span>1. Merge</span></a></h3><p>在常见的 Git 工作流中, 我们会有 2 个长期存在并且不会被删除的分支: master 和 develop。而在日常开发流程中, 我们使用的是特性分支，也叫功能分支。当需要开发一个新的功能的时候，可以新建一个 feature-xxx 的分支，在里边开发新功能，开发完成后，将之并入 develop 分支中，如下图:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                        H---I---J feature-xxx
                        /       \\
                E---F---G---K----L develop
                /
    A---B---C---D master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>L</code> 这个提交是由 <code>Git</code> 自动生成的合并提交节点。</p><blockquote><p>注意, 如果 git 可以通过移动指针完成合并, 那么默认情况下将不会创建提交节点, 这个优化又被称之为 <code>fast-forward(ff)</code> , 如需关闭该优化项, 可添加参数 <code>--no-ff</code> 要求 git 创建提交节点。</p></blockquote><h3 id="_2-squash-merge" tabindex="-1"><a class="header-anchor" href="#_2-squash-merge"><span>2. Squash Merge</span></a></h3><p>在日常的 MR/PR 过程中, 我们会发现合并时有个选项叫 <code>squash commits</code> 。 顾名思义, <code>Squash</code> 意味着会将多个 commit(提交) 合并到一个。与 <code>Merge</code> 类似的是, 使用 <code>Squash Merge</code> 将会在该分支末尾追加一个提交记录, 如下拓扑结构:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                        H---I---J feature-xxx
                        / 
                E---F---G---K----L&#39; develop (where L&#39; == (H + I +J)
                /
    A---B---C---D master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是, 与普通的 <code>Merge</code> 不同的是, <code>Squash Merge</code> 会<strong>丢弃</strong>原来分支 (feature-xxx) 上的所有提交记录, 并生成一个包含原来提交的所有内容的提交节点。<br> 基于以上特性, 如果 <code>Squash Merge</code> 后继续在 <code>feature-xxx</code> 分支开发, 那么下次合并后将大概率出现<strong>冲突</strong>，这时候就需要用到 <code>cherry-pick</code> 。</p><h3 id="_3-cherry-pick" tabindex="-1"><a class="header-anchor" href="#_3-cherry-pick"><span>3. Cherry-pick</span></a></h3><p>根据 git-book 中的介绍, <code>cherry-pick</code> 提供了从另一分支中 <code>挑选(pick)</code> 单个或数个提交并应用到当前的开发分支中的能力。 我们以 <code>Squash Merge</code> 后意外地在原分支中继续开发为例, 介绍 cherry-pick 的操作流程, 如下拓扑结构:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                        H---I---J---M---N feature-xxx
                        /           \`    \`
                E---F---G---K----L&#39;---M&#39;---N&#39; develop (where M&#39;, N&#39; is chery pick from M, N)
                /
    A---B---C---D master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了修复 <code>Sqaush Merge</code> 引来的意外冲突以外, <code>cherry-pick</code> 还常用于从不稳定的开发分支(不具备合并到主分支的条件)挑选个别需要紧急发布的安全修复到稳定分支中, 这种场景合并没有意义, 因为合并反而会引入更多不需要的变更。</p><h3 id="_4-rebase" tabindex="-1"><a class="header-anchor" href="#_4-rebase"><span>4. Rebase</span></a></h3><p>最后一种常用的, 也是最强大(复杂)的合并方式是 Rebase。顾名思义, <code>Rebase(变基)</code> 即变更当前分支的根节点, 我们以如下拓扑结构为例介绍 Rebase 的流程:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>        E---F---G feature-xxx
        /
    A---B---C---D develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们开发的基础分支已经落后于原分支时, 我们在提交代码前就应该使用 <code>rebase</code> :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ git rebase develop feature-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行以上操作后, 拓扑结构将调整为如下所示:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                E&#39;---F&#39;---G&#39; feature-xxx
                /
    A---B---C---D develop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中, E&#39;, F&#39;, G&#39; 与原来的 E, F, G 内容完全一致, 本质上是在另一个根节点后重新应用原来的提交。</p><p>值得注意的是, <code>rebase</code> 后的分支是必然符合 <code>fast-forward</code> 的优化条件的, 这意味着 <code>rebase merge</code> 可以不创建无意义的合并节点, 有利于保持代码分支的可读性。</p><h4 id="交互式-rebase" tabindex="-1"><a class="header-anchor" href="#交互式-rebase"><span>交互式 Rebase</span></a></h4><p><code>Rebase</code> 本质上是在另一个根节点上 <strong>重放</strong> 你的代码提交记录, 因此 <code>rebase</code> 不仅仅具备变更根节点的能力, 还能压缩代码提交记录(squash), 修改代码提交信息(edit) 甚至可删除部分提交(drop)。我们可以通过启动一个交互式的 Rebase 会话来做到上述功能:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ git rebase -i HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述指令后, Git 将打开一个编辑器, 依据指引操作即可:</p><div class="language-vim line-numbers-mode" data-ext="vim" data-title="vim"><pre class="language-vim"><code>pick 6b2e82f 2
pick a95710b 4

## 变基 7244a00..a95710b 到 7244a00（2 个提交）
#
## 命令:
## p, pick &lt;提交&gt; = 使用提交
## r, reword &lt;提交&gt; = 使用提交，但修改提交说明
## e, edit &lt;提交&gt; = 使用提交，进入 shell 以便进行提交修补
## s, squash &lt;提交&gt; = 使用提交，但融合到前一个提交
## f, fixup &lt;提交&gt; = 类似于 &quot;squash&quot;，但丢弃提交说明日志
## x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）
## b, break = 在此处停止（使用 &#39;git rebase --continue&#39; 继续变基）
## d, drop &lt;提交&gt; = 删除提交
## l, label &lt;label&gt; = 为当前 HEAD 打上标记
## t, reset &lt;label&gt; = 重置 HEAD 到该标记
## m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [## &lt;oneline&gt;]
## .       创建一个合并提交，并使用原始的合并提交说明（如果没有指定
## .       原始提交，使用注释部分的 oneline 作为提交说明）。使用
## .       -c &lt;提交&gt; 可以编辑提交说明。
#
## 可以对这些行重新排序，将从上至下执行。
#
## 如果您在这里删除一行，对应的提交将会丢失。
#
## 然而，如果您删除全部内容，变基操作将会终止。
#
## 注意空提交已被注释掉
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何区分不同的合并方式" tabindex="-1"><a class="header-anchor" href="#如何区分不同的合并方式"><span>如何区分不同的合并方式？</span></a></h2><p>一般情况下, 我们选择不同的合并方式应该基于同一个准则: <strong>维护一份干净且可用的代码提交历史</strong>。为此, 我们需要区分不同的场景使用以上不同的合并方式。</p><h3 id="_1-merge-1" tabindex="-1"><a class="header-anchor" href="#_1-merge-1"><span>1. Merge</span></a></h3><p>毋庸置疑, 合并是最通用的代码合并方式。当你需要将来自一个分支的整个功能完全合并到另一个分支时, 使用 <code>merge</code> 可以将代码提交历史完整地保存下来, 为代码溯源(git blame)提供最有价值的技术指导。</p><p>以 Git 工作流为例, 当需要发布 <code>develop</code> 至稳定的环境时, 就应当将 <code>develop</code> 分支 <code>merge</code> 到 <code>master</code> 分支。</p><h3 id="_2-squash-merge-1" tabindex="-1"><a class="header-anchor" href="#_2-squash-merge-1"><span>2. Squash Merge</span></a></h3><p>如前所述, <code>Squash Merge</code> 会将代码提交记录压缩合并为 1个, 并且操作不当容易引发代码冲突。不过仍然有些情况是建议将提交记录进行压缩的:</p><p>以功能开发为例, 当我们开发一个功能分支时, 可能会产生很多意义不大的提交记录(例如可能 commit 后才发现有 typo, 于是又多了个修复 typo 的 commit)。</p><p>一般情况下, 是否使用 <code>Squash Merge</code> 是一个团队偏好问题:</p><ol><li>如果你觉得意义不大的提交记录污染了主分支的代码历史, 那么你将代码合并到主分支前就应当合并你的代码提交历史, 而 <code>Squash Merge</code> 则是<strong>其中一种</strong>合并提交记录的方式。</li><li>如果你觉得所有提交都应该被追踪(例如某些团队以提交记录作为工作凭证？), 那么你的所有提交就不应该被任何人&quot;篡改&quot;！</li></ol><p>一些团队可能认为使用 <code>Squash Merge</code> 有助于保持主分支的整洁, 但是并不能说这就是绝对正确的事情，所以这主要还是一个偏好问题。</p><blockquote><p>而且, 为什么不使用 <code>rebase</code> 调整代码记录后再进行代码合并呢！</p></blockquote><h3 id="_3-cherry-pick-1" tabindex="-1"><a class="header-anchor" href="#_3-cherry-pick-1"><span>3. Cherry-pick</span></a></h3><p><code>Cherry-pick</code> 用于从某个分支挑选个别提交记录合并至指定分支, 因此 cherry-pick 常用的场景即是从开发分支中 <strong>挑选(pick)</strong> 安全修复至稳定分支(如, master)。除此之外, 在日常开发中如需从其他开发分支中摘取部分代码时, 亦可使用 <code>cherry-pick</code> 。</p><h3 id="_4-rebase-1" tabindex="-1"><a class="header-anchor" href="#_4-rebase-1"><span>4. Rebase</span></a></h3><p><code>Rebase</code> 是 Git 常用命令中最强大的命令之一, 使用场景亦是最广泛的, 包括:</p><ol><li>当你的开发分支是基于过时的分支时:</li></ol><p>这是团队开发中最为常见的场景: 当其他人将代码合并至远程的 develop 分支后, 你的开发分支将落后于 develop 分支。</p><p>为了保证开发的功能不被其他人破坏, 本地测试时应当保证本地代码是最新的。在这种情况下, 我们可以将 develop 分支逆向合并至本地开发分支, 但是这会产生不必要的代码提交记录。使用 <code>Rebase</code> 即可更优雅地解决这个 &quot;噪音&quot; 问题。</p><ol start="2"><li>当你希望不产生额外的代码合并记录时:</li></ol><p>正如前言, <code>rebase</code> 后的分支是必然符合 <code>fast-forward</code> 的优化条件的, 这意味着 <code>rebase merge</code> 可以不创建无意义的合并节点, 有利于保持代码分支的可读性。</p><ol start="3"><li>当你需要清理或调整某些提交记录时:</li></ol><p>这种情况在现实开发中也是经常发生的: 例如当你在代码提交后意外发现代码中(或者 commit message 中)存在错别字, 但是这份代码又并未合并到主分支时。</p><p>我们期望维护一份干净而可用的代码提交历史，不希望某些意义不大或存在歧义的提交记录污染主分支的代码提交历史, 此时我们就应该使用可交互式的 Rebase 压缩或调整代码提交记录。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Git 提供了多种合并代码的方式, 日常开发使用普通的 Merge 即可。如非团队开发约定, 尽量少用 <code>Squash Merge</code> 。如需压缩代码提交记录, 可于本地使用 <code>Rebase</code> 调整代码提交历史后, 再合并至主分支。而对于安全修复等紧急发布, 可使用 <code>cherry-pick</code> 摘取提交记录合并至主分支。</p>`,57),r=[d];function n(l,c){return a(),i("div",null,r)}const p=e(s,[["render",n],["__file","git-merge-method.html.vue"]]),m=JSON.parse('{"path":"/posts/2022/05/27/git-merge-method.html","title":"Git 合并代码的不同方式 - Merge Commit、Squash and merge、Cherry-pick、Rebase and merge","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/common/2022-05-27-Git Merge Method.md","date":"2022-05-27T00:00:00.000Z","title":"Git 合并代码的不同方式 - Merge Commit、Squash and merge、Cherry-pick、Rebase and merge","sidebarDepth":2,"category":"基础技术","tags":["git"],"description":"前言 我们在日常开发中经常使用 Git 管理代码, 每个人在各自的分支开发代码, 开发完毕后在 Gitlab/Github 上提交 MR/PR, 最后点击 merge 按钮即将代码合并至主分支... 在稍微学习 Git 相关的知识后, 我们会发现 Git 代码合并的方法绝不仅此一种, 不同的代码合并方式之间有什么差异？各自又适用于什么样的场景？我将在这...","head":[["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2022/05/27/git-merge-method.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"Git 合并代码的不同方式 - Merge Commit、Squash and merge、Cherry-pick、Rebase and merge"}],["meta",{"property":"og:description","content":"前言 我们在日常开发中经常使用 Git 管理代码, 每个人在各自的分支开发代码, 开发完毕后在 Gitlab/Github 上提交 MR/PR, 最后点击 merge 按钮即将代码合并至主分支... 在稍微学习 Git 相关的知识后, 我们会发现 Git 代码合并的方法绝不仅此一种, 不同的代码合并方式之间有什么差异？各自又适用于什么样的场景？我将在这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2022-05-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 合并代码的不同方式 - Merge Commit、Squash and merge、Cherry-pick、Rebase and merge\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"不同的代码合并方式","slug":"不同的代码合并方式","link":"#不同的代码合并方式","children":[{"level":3,"title":"1. Merge","slug":"_1-merge","link":"#_1-merge","children":[]},{"level":3,"title":"2. Squash Merge","slug":"_2-squash-merge","link":"#_2-squash-merge","children":[]},{"level":3,"title":"3. Cherry-pick","slug":"_3-cherry-pick","link":"#_3-cherry-pick","children":[]},{"level":3,"title":"4. Rebase","slug":"_4-rebase","link":"#_4-rebase","children":[]}]},{"level":2,"title":"如何区分不同的合并方式？","slug":"如何区分不同的合并方式","link":"#如何区分不同的合并方式","children":[{"level":3,"title":"1. Merge","slug":"_1-merge-1","link":"#_1-merge-1","children":[]},{"level":3,"title":"2. Squash Merge","slug":"_2-squash-merge-1","link":"#_2-squash-merge-1","children":[]},{"level":3,"title":"3. Cherry-pick","slug":"_3-cherry-pick-1","link":"#_3-cherry-pick-1","children":[]},{"level":3,"title":"4. Rebase","slug":"_4-rebase-1","link":"#_4-rebase-1","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"readingTime":{"minutes":8.58,"words":2574},"filePathRelative":"_posts/common/2022-05-27-git-merge-method.md","localizedDate":"2022年5月27日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{p as comp,m as data};
