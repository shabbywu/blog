import{_ as d,a as l}from"./Docker-Registry-v2-auth-via-central-service-BlF2KKtw.js";import{_ as c,r,o as u,c as m,f as i,g as e,i as n,w as o,e as t}from"./app-iv9USOQR.js";const h={},b=t('<h2 id="preface" tabindex="-1"><a class="header-anchor" href="#preface"><span>Preface</span></a></h2><p>We are now in the era of containerization, where hardly anyone in development, testing, or operations would be unfamiliar with or unable to use Docker. Using Docker is also straightforward; most of the time, launching a container simply involves executing <code>docker run {your-image-name}</code>, and building an image is as simple as executing <code>docker build dockerfile .</code>.<br> Perhaps it&#39;s precisely because Docker encapsulates implementation details so thoroughly that I recently realized that we may have only learned <strong>how to use Docker CLI</strong>, rather than understanding how Docker actually operates.<br> I will discuss the implementation details related to <code>Docker build dockerfile .</code> in the 『How To Build Image』 series. This article is the second in the series and will introduce the implementation details involved in creating a container from an image. This article is the third installment of the series and will introduce the interaction process and implementation details between <code>Docker Daemon</code> and <code>Docker Registry</code>.</p><h2 id="relationship-between-docker-daemon-and-docker-registry" tabindex="-1"><a class="header-anchor" href="#relationship-between-docker-daemon-and-docker-registry"><span>Relationship between Docker Daemon and Docker Registry</span></a></h2><p>The command we commonly use, <code>docker</code>, is referred to as <code>Docker CLI</code>. <code>Docker CLI</code> provides users with commands to operate images, containers, networks, and volumes in the command line. However, the process that actually interacts with the corresponding resource entities is <code>Docker Daemon</code>.</p><p><code>Docker</code> follows a typical client/server architecture, where <code>Docker Daemon</code> serves as the backend service component, responsible for managing all Docker resources on the host machine and communicating with other daemons.</p><p><code>Docker Registry</code> is responsible for storing and distributing Docker images. When we invoke <code>docker pull</code> and <code>docker push</code>, <code>Docker Daemon</code> retrieves images from or pushes images to <code>Docker Registry</code>. <img src="'+d+'" alt="Docker architecture" loading="lazy"></p><h2 id="process-of-docker-daemon-pulling-images" tabindex="-1"><a class="header-anchor" href="#process-of-docker-daemon-pulling-images"><span>Process of Docker Daemon Pulling Images</span></a></h2>',7),v=i("code",null,"docker pull",-1),g=i("code",null,"Docker Daemon",-1),p=i("code",null,"Docker Registry",-1),f=i("code",null,"config.json",-1),y=i("code",null,"manifest.json",-1),q=i("code",null,"layer.tar",-1),k=i("p",null,[e("The answer is "),i("em",null,"NO"),e(". When distributing images, Docker Registry distributes them based on image layers rather than directly distributing the image itself.")],-1),_=i("code",null,"Docker Daemon",-1),D=i("p",null,[e("To solve this issue, another concept needs to be introduced: "),i("code",null,"Docker Image Manifest"),e(".")],-1),w=i("h3",{id:"docker-image-manifest",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#docker-image-manifest"},[i("span",null,"Docker Image Manifest")])],-1),E=i("p",null,[e("The "),i("code",null,"Docker Image Manifest"),e(" is different from "),i("code",null,"manifest.json"),e(". The former is a manifest file used to describe images in the Docker Registry, while the latter is a manifest file describing the contents exported from an image.")],-1),I=i("code",null,"Docker Image Manifest",-1),T={href:"https://github.com/distribution/distribution/blob/main/docs/spec/manifest-v2-1.md",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/distribution/distribution/blob/main/docs/spec/manifest-v2-2.md",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>Below is an example of a manifest in Schema 2 format:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;schemaVersion&quot;: 2,
    &quot;mediaType&quot;: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;,
    &quot;config&quot;: {
        &quot;mediaType&quot;: &quot;application/vnd.docker.container.image.v1+json&quot;,
        &quot;size&quot;: 7023,
        &quot;digest&quot;: &quot;sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7&quot;
    },
    &quot;layers&quot;: [
        {
            &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
            &quot;size&quot;: 32654,
            &quot;digest&quot;: &quot;sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f&quot;
        },
        {
            &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
            &quot;size&quot;: 16724,
            &quot;digest&quot;: &quot;sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b&quot;
        },
        {
            &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
            &quot;size&quot;: 73109,
            &quot;digest&quot;: &quot;sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736&quot;
        }
    ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A={class:"hint-container tip"},x=i("p",{class:"hint-container-title"},"Tips",-1),j=i("strong",null,"application/vnd.docker.container.image.v1+json",-1),z=i("code",null,"Config",-1),C=i("code",null,"Image JSON ",-1),M=t(`<h3 id="summary-of-process" tabindex="-1"><a class="header-anchor" href="#summary-of-process"><span>Summary of Process</span></a></h3><p>The <code>Docker Registry</code> uses <strong>digests</strong> to locate image layers and image configurations. The <code>Docker Image Manifest</code> describes the digests of image configurations and image layers, as well as their corresponding file types. Finally, the <code>Docker Daemon</code> only needs to download and parse the manifest one by one.</p><p>In summary, the process of <code>docker pull</code> can be outlined as follows:</p><div class="language-plantuml line-numbers-mode" data-ext="plantuml" data-title="plantuml"><pre class="language-plantuml"><code><img src="https://www.plantuml.com/plantuml/svg/SYWk0JH2refsmp0OtlqKAlVWNkQfpBDhAubgK2eh1zw-eUB5IGpVRqMx5CtecBkUNK21jeiHjjljFNFt-PHvRZ5n7Wi5ADaQ8TbC5HQ5IZZ1tFS1Qoegntl62BPe5Uw-ir9mdedsY5AWu8yEivADSUYa2cw_OcSZEEiQ13nGqG8L2sZpp-YZnP39SFiDwzJi5-RkSlcSzpcozN_tWkEic1M-sO8UE8Ed6eikbptM5nIgZdEcZrySLApJV-QLeIZBaF0aw7h_-6TPGa_sqx75UmPZGNFjIG_KOtrjIF7knq1jNyYUgbz2x1kA2BTVi_odXZAqmWvBwV4owq07YGKNvXIsdggYkXEhnBqGKxZzNZWlBaNwKLdmubsdqjypfi-rvd4FrgNu4m00
"></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-daemon-image-push-process" tabindex="-1"><a class="header-anchor" href="#docker-daemon-image-push-process"><span>Docker Daemon Image Push Process</span></a></h2><p>The workflow for pushing images is completely opposite to pulling images. The <code>Docker Daemon</code> first creates an image manifest. Then, it needs to push all image layers to the <code>Docker Registry</code>. Only when all image layers are completely pushed to the image repository, the image configuration is uploaded to the image repository. Finally, the image manifest is pushed. The process of <code>docker push</code> can be outlined as follows:</p><div class="language-plantuml line-numbers-mode" data-ext="plantuml" data-title="plantuml"><pre class="language-plantuml"><code><img src="https://www.plantuml.com/plantuml/svg/RP35ViH02CRlynJKlVUw7kjwvhSX2TsHT61MthxH-Wc7Fz-fA4PDpfhMCVjP68qfGfMaXDtTtGEpVzbbBf5Sy32AX4e2xB0WSEWv9z43Oo9LTGNsx-h9lcfnJb50w3sHLqPhvtKZvx1-6KYWN_n01Ol6EQ2DXDaSIfmGQ4aWwEZxgfED9krX_IPicFtdoWRCljTX5BoILz3mU_c18IjabivgZfhcjMIb_SSnLtN1PvmF-DEIBS7wTOZqymaDhIOrWW_Q482hUpRCBuwQ8ESYHLGEDMWNxhv9y1l_KGtJl-JyjrKqLEQqfatEVW00
"></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="an-essential-step-beyond-the-process-user-authentication" tabindex="-1"><a class="header-anchor" href="#an-essential-step-beyond-the-process-user-authentication"><span>An Essential Step Beyond the Process: User Authentication</span></a></h2><p>So far, we have fully demonstrated the operation process of pulling and pushing images. However, there is another crucial step that has not yet been introduced, and that is <strong>user authentication</strong>.</p><p>Docker Registry implements user identity authentication using a central authentication service. The specific authentication process is illustrated as follows: <img src="`+l+'" alt="v2-auth-via-central-service" loading="lazy"></p><ol><li><code>Docker Daemon</code> attempts to perform pull/push operations.</li><li>If <code>Docker Registry</code> requires user authentication, it should return an <code>HTTP 401 Unauthorized</code> response, along with a description of how to authenticate the user in the response headers (based on the WWW-Authenticate protocol).</li><li><code>Docker Daemon</code> authenticates the user with the central authentication service.</li><li>The central authentication service returns a <code>Bearer token</code> to <code>Docker Daemon</code>, representing the user&#39;s identity.</li><li><code>Docker Daemon</code> retries the request sent in <strong>Step 1</strong>, including the <code>Bearer token</code> returned in <strong>Step 4</strong> in the request header.</li><li><code>Docker Registry</code> authenticates the <code>Bearer token</code> included in the request header. Once verified, it responds normally.</li></ol><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started"><span>Getting Started</span></a></h2>',12),P=t(`<h3 id="_1-create-docker-image-manifest" tabindex="-1"><a class="header-anchor" href="#_1-create-docker-image-manifest"><span>1. Create Docker Image Manifest</span></a></h3><p>Following the process outlined in the previous article, rebuild the image. After calculating the sha256 digest of both the <code>image configuration (config.json)</code> and the <code>image layer (layer.tar)</code>, you can write the <code>Docker Image Manifest</code>. The resulting JSON file will look like this:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;schemaVersion&quot;: 2,
    &quot;mediaType&quot;: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;,
    &quot;config&quot;: {
        &quot;mediaType&quot;: &quot;application/vnd.docker.container.image.v1+json&quot;,
        &quot;size&quot;: 546,
        &quot;digest&quot;: &quot;sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot;
    },
    &quot;layers&quot;: [
        {
            &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
            &quot;size&quot;: 10240,
            &quot;digest&quot;: &quot;sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot;
        }
    ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-upload-image-layers-and-image-configuration-to-docker-registry" tabindex="-1"><a class="header-anchor" href="#_2-upload-image-layers-and-image-configuration-to-docker-registry"><span>2. Upload Image Layers and Image Configuration to Docker Registry</span></a></h3>`,4),$={href:"https://github.com/distribution/distribution/blob/main/docs/spec/api.md#monolithic-upload",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>## Environment variables involved:
## - your_username: Your DockerHub account username
## - your_password: Password for your DockerHub account
## - your_token: Token or access_token returned from the authentication endpoint

## [User Authentication] Initiate the upload of image configuration
➜ curl -X POST &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/uploads/&quot; -v

## HTTP 401 Unauthorized
## &lt; HTTP/1.1 401 Unauthorized
## &lt; docker-distribution-api-version: registry/2.0
## &lt; www-authenticate: Bearer realm=&quot;https://auth.docker.io/token&quot;,service=&quot;registry.docker.io&quot;,scope=&quot;repository:\${your_username}/runc-hello:pull,push&quot;

## [User Authentication] Perform user authentication
➜ curl -u &quot;\${your_username}:\${your_password}&quot; &quot;https://auth.docker.io/token?service=registry.docker.io&amp;scope=repository:\${your_username}/runc-hello:pull,push&quot;
## {
##  &quot;token&quot;: &quot;...&quot;,
##  &quot;access_token&quot;: &quot;...&quot;,
##  &quot;expires_in&quot;: 300,
##  &quot;issued_at&quot;: &quot;2021-12-07T01:50:05.654533932Z&quot;
## }

## [Upload image configuration] Reinitiate the upload image configuration operation
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; -X POST &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/uploads/&quot; -v
## &lt; HTTP/1.1 202 Accepted
## &lt; content-length: 0
## &lt; docker-distribution-api-version: registry/2.0
## &lt; docker-upload-uuid: 53231064-74b5-48d5-8cbd-5f810fa99a0c
## &lt; location: https://registry.hub.docker.com/v2/435495971/runc-hello/blobs/uploads/53231064-74b5-48d5-8cbd-5f810fa99a0c?_state=S8Kt2Fx6i-CX-C7j4kS9RahBhxtS5BySKuJoaKup6QJ7Ik5hbWUiOiI0MzU0OTU5NzEvcnVuYy1oZWxsbyIsIlVVSUQiOiI1MzIzMTA2NC03NGI1LTQ4ZDUtOGNiZC01ZjgxMGZhOTlhMGMiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjEtMTItMDdUMDI6NDE6MjEuODgwMDcwOTI5WiJ9

## [Upload image configuration] Start uploading image configuration content
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; -X PUT &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/uploads/53231064-74b5-48d5-8cbd-5f810fa99a0c?_state=S8Kt2Fx6i-CX-C7j4kS9RahBhxtS5BySKuJoaKup6QJ7Ik5hbWUiOiI0MzU0OTU5NzEvcnVuYy1oZWxsbyIsIlVVSUQiOiI1MzIzMTA2NC03NGI1LTQ4ZDUtOGNiZC01ZjgxMGZhOTlhMGMiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjEtMTItMDdUMDI6NDE6MjEuODgwMDcwOTI5WiJ9&amp;digest=sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot; --upload-file config.json -v
## Successful, HTTP 201
## &lt; HTTP/1.1 201 Created
## &lt; content-length: 0
## &lt; docker-content-digest: sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5


## [Upload image layer] Initiate the upload image layer request
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; -X POST &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/uploads/&quot; -v
## &lt; HTTP/1.1 202 Accepted
## &lt; content-length: 0
## &lt; docker-distribution-api-version: registry/2.0
## &lt; docker-upload-uuid: 34efca43-27ed-4806-a74e-6cbea2d222f2
## &lt; location: https://registry.hub.docker.com/v2/435495971/runc-hello/blobs/uploads/34efca43-27ed-4806-a74e-6cbea2d222f2?_state=O7lkfqKiEF-Ryqhms-_CnCsmd76kDtt_HjuprAebwJN7Ik5hbWUiOiI0MzU0OTU5NzEvcnVuYy1oZWxsbyIsIlVVSUQiOiIzNGVmY2E0My0yN2VkLTQ4MDYtYTc0ZS02Y2JlYTJkMjIyZjIiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjEtMTItMDdUMDI6NDY6MzEuNTY2ODMwNjI3WiJ9

## [Upload image layer] Start uploading image layer content
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; -X PUT &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/uploads/34efca43-27ed-4806-a74e-6cbea2d222f2?_state=O7lkfqKiEF-Ryqhms-_CnCsmd76kDtt_HjuprAebwJN7Ik5hbWUiOiI0MzU0OTU5NzEvcnVuYy1oZWxsbyIsIlVVSUQiOiIzNGVmY2E0My0yN2VkLTQ4MDYtYTc0ZS02Y2JlYTJkMjIyZjIiLCJPZmZzZXQiOjAsIlN0YXJ0ZWRBdCI6IjIwMjEtMTItMDdUMDI6NDY6MzEuNTY2ODMwNjI3WiJ9&amp;digest=sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot; --upload-file layer.tar -v
## Successful, HTTP 201
## &lt; HTTP/1.1 201 Created
## &lt; content-length: 0
## &lt; docker-content-digest: sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed
## &lt; docker-distribution-api-version: registry/2.0
## &lt; location: https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-upload-image-list" tabindex="-1"><a class="header-anchor" href="#_3-upload-image-list"><span>3. Upload image list</span></a></h3><p>The example in Docker&#39;s official documentation uses Manifest Schema 1, which contains very complex content, but in fact, Schema 2 can also be used to create an image manifest.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; -X PUT &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/manifests/latest&quot; -H &quot;Content-Type: application/vnd.docker.distribution.manifest.v2+json&quot; -v -d &#39;{
    &quot;schemaVersion&quot;: 2,
    &quot;mediaType&quot;: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;,
    &quot;config&quot;: {
        &quot;mediaType&quot;: &quot;application/vnd.docker.container.image.v1+json&quot;,
        &quot;size&quot;: 546,
        &quot;digest&quot;: &quot;sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot;
    },
    &quot;layers&quot;: [
        {
            &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
            &quot;size&quot;: 10240,
            &quot;digest&quot;: &quot;sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot;
        }
    ]
}&#39;
## Successful, HTTP 201
## &lt; HTTP/1.1 201 Created
## &lt; docker-content-digest: sha256:c4c42af74cf13c704100d9a7583d106d90f737ffb7dc12593022884986fc41dc
## &lt; docker-distribution-api-version: registry/2.0
## &lt; location: https://registry.hub.docker.com/v2/\${your_username}/runc-hello/manifests/sha256:c4c42af74cf13c704100d9a7583d106d90f737ffb7dc12593022884986fc41dc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-verify" tabindex="-1"><a class="header-anchor" href="#_4-verify"><span>4. Verify</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ docker pull 435495971/runc-hello:latest
## latest: Pulling from 435495971/runc-hello
## cc668e407245: Pull complete
## Digest: sha256:c4c42af74cf13c704100d9a7583d106d90f737ffb7dc12593022884986fc41dc
## Status: Downloaded newer image for 435495971/runc-hello:latest
## docker.io/435495971/runc-hello:latest

➜ docker run --rm 435495971/runc-hello:latest
Hello runc!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2>`,7),Z=i("code",null,"Docker Daemon",-1),U=i("code",null,"Docker Registry",-1),N=i("code",null,"docker pull",-1),H=i("code",null,"docker push",-1),O=t(`<p>Up to this point, we have mastered the basic knowledge of image distribution and uploading. The next article in this series will delve into the hidden details behind <code>docker build dockerfile .</code> and will also introduce Google&#39;s solution for building images within containers, known as kaniko.</p><h2 id="appendix" tabindex="-1"><a class="header-anchor" href="#appendix"><span>Appendix</span></a></h2><h3 id="step-by-step-guide-to-pulling-images-from-docker-registry" tabindex="-1"><a class="header-anchor" href="#step-by-step-guide-to-pulling-images-from-docker-registry"><span>Step-by-Step Guide to Pulling Images from Docker Registry</span></a></h3><p>Due to space constraints, the 「Getting Started」 section of the main text only demonstrated the process of pushing images. Here, we continue to explore the steps involved in pulling images.</p><h4 id="_1-downloading-image-manifest" tabindex="-1"><a class="header-anchor" href="#_1-downloading-image-manifest"><span>1. Downloading Image Manifest</span></a></h4><p>When downloading the image manifest, Docker Registry defaults to returning <code>Schema 1</code>. If you wish to receive the <code>Schema 2</code> version of the manifest, you need to specify <code>Accept: application/vnd.docker.distribution.manifest.v2+json</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>➜ curl -H &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -H &quot;Authorization: Bearer \${your_token}&quot; &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/manifests/latest&quot;
## {
##     &quot;schemaVersion&quot;: 2,
##     &quot;mediaType&quot;: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;,
##     &quot;config&quot;: {
##         &quot;mediaType&quot;: &quot;application/vnd.docker.container.image.v1+json&quot;,
##         &quot;size&quot;: 546,
##         &quot;digest&quot;: &quot;sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot;
##     },
##     &quot;layers&quot;: [
##         {
##             &quot;mediaType&quot;: &quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;,
##             &quot;size&quot;: 10240,
##             &quot;digest&quot;: &quot;sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot;
##         }
##     ]
## }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-downloading-image-configuration-and-image-layers" tabindex="-1"><a class="header-anchor" href="#_2-downloading-image-configuration-and-image-layers"><span>2. Downloading Image Configuration and Image Layers</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>## Download the image configuration
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot; -o 2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5 -L

## Verify the image configuration
➜ cat 2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5
{&quot;architecture&quot;:&quot;amd64&quot;,&quot;config&quot;:{&quot;User&quot;:&quot;&quot;,&quot;Tty&quot;:false,&quot;Env&quot;:[&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;],&quot;Cmd&quot;:[&quot;/hello&quot;],&quot;Volumes&quot;:null,&quot;WorkingDir&quot;:&quot;/&quot;,&quot;Entrypoint&quot;:null,&quot;Labels&quot;:null},&quot;created&quot;:&quot;1970-01-01T00:00:00.0Z&quot;,&quot;docker_version&quot;:&quot;20.10.5&quot;,&quot;history&quot;:[{&quot;created&quot;:&quot;1970-01-01T00:00:00.0Z&quot;,&quot;created_by&quot;:&quot;nasm hello.nasm -f elf64 -o hello.o &amp;&amp; ld hello.o -o hello &amp;&amp; cp hello /hello&quot;}],&quot;os&quot;:&quot;linux&quot;,&quot;rootfs&quot;:{&quot;type&quot;:&quot;layers&quot;,&quot;diff_ids&quot;:[&quot;sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot;]}}

## Download the image layers
➜ curl -H &quot;Authorization: Bearer \${your_token}&quot; &quot;https://registry.hub.docker.com/v2/\${your_username}/runc-hello/blobs/sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot; -o cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed -L

## Verify the image layers
➜ tar -tf cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-storing-images-in-specific-directories" tabindex="-1"><a class="header-anchor" href="#_3-storing-images-in-specific-directories"><span>3. Storing Images in Specific Directories</span></a></h4><p>Although the Docker Registry interface is simple, the Docker Daemon itself needs to store the corresponding files in specific directories. The specific process includes:</p><ul><li>Storing the image configuration in the <code>graph</code> directory under <code>image/\${storage_driver}/imagedb/content/sha256/</code>.</li><li>Extracting the contents of the image layers into the <code>graph</code> directory under <code>\${storage_driver}/\${cache_id}</code>.</li><li>Storing the image layer records in the <code>graph</code> directory under <code>image/\${storage_driver}/layerdb/content/sha256/</code>.</li><li>Recording the association between images and tags in the <code>graph</code> directory under <code>image/\${storage_driver}/repositories.json</code>.</li></ul><p>The following demonstrates the corresponding operations:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>## Extract the current graph path
➜ graph=\`docker info|grep -Eo &quot;Docker Root Dir: .*&quot; | sed -r &quot;s/Docker Root Dir: (.*)/\\1/g&quot;\`

## Extract Storage Driver Type
➜ storage_driver=\`docker info|grep -Eo &quot;Storage Driver: .*&quot; | sed -r &quot;s/Storage Driver: (.*)/\\1/g&quot;\`

## Storage mirroring configuration
➜ cp 2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5 &quot;\${graph}/image/\${storage_driver}/imagedb/content/sha256/2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&quot;

## Build image layer content
### 1. generate random cache-id
➜ cache_id=\`cat /proc/sys/kernel/random/uuid | md5sum | awk &#39;{print $1}&#39;\`
### 2. Create mapping directory
➜ mkdir -p &quot;\${graph}/\${storage_driver}/\${cache_id}&quot;
➜ touch &quot;\${graph}/\${storage_driver}/\${cache_id}/committed&quot;
➜ mkdir &quot;\${graph}/\${storage_driver}/\${cache_id}/diff&quot;
### 3. Unzip the image layer to the diff directory
➜ tar -xf cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed -C &quot;\${graph}/\${storage_driver}/\${cache_id}/diff&quot;
### 4. generate short ID (26 bits long)
➜ lid=\`cat /proc/sys/kernel/random/uuid | md5sum | awk &#39;{print substr($1,0,27)}&#39;\`
### 5. Create layer mapping
➜ ln -s &quot;../\${cache_id}/diff&quot; &quot;\${graph}/\${storage_driver}/l/\${lid}&quot; 
### 6. set short shasum id
➜ echo -n &quot;$lid&quot; &gt; &quot;\${graph}/\${storage_driver}/\${cache_id}/link&quot;


## Build image layer content (index)
➜ mkdir -p &quot;\${graph}/image/\${storage_driver}/layerdb/sha256/cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot;
### 1. set diff-id
➜ echo -n &quot;sha256:cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed&quot; &gt; &quot;\${graph}/image/\${storage_driver}/layerdb/sha256/cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed/diff&quot;
### 2. set image layer size
➜ echo -n \`stat &quot;\${graph}/\${storage_driver}/\${cache_id}/diff/hello&quot; --printf &#39;%s&#39;\` &gt; &quot;\${graph}/image/\${storage_driver}/layerdb/sha256/cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed/size&quot;
### 3. set short shasum id
➜ echo -n &quot;\${cache_id}&quot; &gt; &quot;\${graph}/image/\${storage_driver}/layerdb/sha256/cc668e407245ebdacbb7ac6d5ead798556adb5aebfcdd7fa2ca777bed3a83fed/cache-id&quot;

## set image index
➜ python -c &quot;import json;fh=open(&#39;\${graph}/image/\${storage_driver}/repositories.json&#39;);repositories=json.load(fh);repositories[&#39;Repositories&#39;][&#39;hello-runc&#39;]={&#39;hello-runc:latest&#39;: &#39;sha256:2bd297f395ef7193402fbf58b1010655c7bf27b22c38545a63c71af402f73dc5&#39;};print(repositories);fh=open(&#39;\${graph}/image/\${storage_driver}/repositories.json&#39;, mode=&#39;w&#39;);json.dump(repositories, fh);&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-verify-1" tabindex="-1"><a class="header-anchor" href="#_4-verify-1"><span>4. Verify</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>## Only by restarting the Docker Daemon process will the image be correctly recognized.
➜ docker images
REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

## Restart Docker Daemon
➜ systemctl restart docker

➜ docker images
REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
hello-runc   latest    2bd297f395ef   51 years ago   1.02kB

➜ docker run --rm hello-runc
Hello runc!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function W(V,G){const a=r("RouteLink"),s=r("ExternalLinkIcon");return u(),m("div",null,[b,i("p",null,[e("As mentioned earlier, when executing "),v,e(" in the command line, it essentially instructs "),g,e(" to pull the required image from "),p,e(". In my previous article titled "),n(a,{to:"/en/posts/2021/04/01/how-to-build-image-%E4%BB%8E-0-%E5%BC%80%E5%A7%8B%E5%B8%A6%E4%BD%A0%E5%BE%92%E6%89%8B%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F.html#%E5%BD%92%E6%A1%A3%E5%B0%81%E5%8C%85"},{default:o(()=>[e("『Guide you to build Docker image manually from scratch』")]),_:1}),e(" the process of building images was demonstrated. Is an image simply an archive package containing "),f,e(" (image configuration), "),y,e(" (image manifest), and "),q,e(" (image layer content)?")]),k,i("p",null,[e("However, this introduces another issue. As described in my another article titled "),n(a,{to:"/en/posts/2021/01/31/how-to-build-images-docker-%E9%95%9C%E5%83%8F%E8%A7%84%E8%8C%83.html"},{default:o(()=>[e("『Docker Image Specification v1.2』")]),_:1}),e(" images are organized based on a certain directory structure. If distribution is based on image layers, how does "),_,e(" know where to download each image layer from?")]),D,w,E,i("p",null,[e("Currently, Docker Registry supports two different formats of "),I,e(": "),i("a",T,[e("Image Manifest Version 2, Schema 1"),n(s)]),e(" and "),i("a",B,[e("Image Manifest Version 2, Schema 2"),n(s)]),e(".")]),S,i("div",A,[x,i("p",null,[e("It is worth noting that the corresponding type of "),j,e(" is the "),z,e(" in "),n(a,{to:"/en/posts/2021/01/31/how-to-build-images-docker-%E9%95%9C%E5%83%8F%E8%A7%84%E8%8C%83.html"},{default:o(()=>[e("『Docker Image Specification v1.2』")]),_:1}),e(" (also known as "),C,e(").")])]),M,i("p",null,[e("In the previous article, "),n(a,{to:"/en/posts/2021/04/01/how-to-build-image-%E4%BB%8E-0-%E5%BC%80%E5%A7%8B%E5%B8%A6%E4%BD%A0%E5%BE%92%E6%89%8B%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F.html#%E5%BD%92%E6%A1%A3%E5%B0%81%E5%8C%85"},{default:o(()=>[e("『Guide you to build Docker image manually from scratch』")]),_:1}),e(", I demonstrated how to build a runnable image from scratch』. Now, let's try pushing that image to the official Docker Registry -- DockerHub.")]),P,i("p",null,[e("According to the "),i("a",$,[e("API documentation"),n(s)]),e(", we will use the monolithic upload method to push the image layers and image configuration to the Docker Registry.")]),R,i("p",null,[e("This article is the third installment of the 『How To Build Images』 series. It begins by introducing the relationship between "),Z,e(" and "),U,e(". It then provides a detailed explanation of the hidden operations behind "),N,e(" and "),H,e(". Finally, using the example of building a runnable image from the previous article "),n(a,{to:"/en/posts/2021/04/01/how-to-build-image-%E4%BB%8E-0-%E5%BC%80%E5%A7%8B%E5%B8%A6%E4%BD%A0%E5%BE%92%E6%89%8B%E6%9E%84%E5%BB%BA-docker-%E9%95%9C%E5%83%8F.html#%E5%BD%92%E6%A1%A3%E5%B0%81%E5%8C%85"},{default:o(()=>[e("『Guide you to build Docker image manually from scratch』")]),_:1}),e(", it fully demonstrates the steps to push an image to DockerHub.")]),O])}const L=c(h,[["render",W],["__file","how-to-build-image-手把手教你如何推镜像至-docker-registry.html.vue"]]),F=JSON.parse('{"path":"/en/posts/2021/12/05/how-to-build-image-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E6%8E%A8%E9%95%9C%E5%83%8F%E8%87%B3-docker-registry.html","title":"How To Build Images: Step-by-step guide you to access Docker Registry","lang":"en-US","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"en/_posts/container/2021-12-05-How To Build Image-手把手教你如何推镜像至 Docker Registry.md","date":"2021-12-05T00:00:00.000Z","title":"How To Build Images: Step-by-step guide you to access Docker Registry","sidebarDepth":2,"category":"Container Technology","tags":["docker","build"],"description":"Preface We are now in the era of containerization, where hardly anyone in development, testing, or operations would be unfamiliar with or unable to use Docker. Using Docker is a...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://blog.shabbywu.cn/posts/2021/12/05/how-to-build-image-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E6%8E%A8%E9%95%9C%E5%83%8F%E8%87%B3-docker-registry.html"}],["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/en/posts/2021/12/05/how-to-build-image-%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E6%8E%A8%E9%95%9C%E5%83%8F%E8%87%B3-docker-registry.html"}],["meta",{"property":"og:site_name","content":"Personal technical article sharing"}],["meta",{"property":"og:title","content":"How To Build Images: Step-by-step guide you to access Docker Registry"}],["meta",{"property":"og:description","content":"Preface We are now in the era of containerization, where hardly anyone in development, testing, or operations would be unfamiliar with or unable to use Docker. Using Docker is a..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.shabbywu.cn/img/DockerCS架构.png"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-10T11:33:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"How To Build Images: Step-by-step guide you to access Docker Registry"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"build"}],["meta",{"property":"article:published_time","content":"2021-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-10T11:33:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Build Images: Step-by-step guide you to access Docker Registry\\",\\"image\\":[\\"https://blog.shabbywu.cn/img/DockerCS架构.png\\",\\"https://blog.shabbywu.cn/img/Docker-Registry-v2-auth-via-central-service.png\\"],\\"datePublished\\":\\"2021-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-10T11:33:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/en/atom.xml","title":"Personal technical article sharing Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/en/feed.json","title":"Personal technical article sharing JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/en/rss.xml","title":"Personal technical article sharing RSS Feed"}]]},"headers":[{"level":2,"title":"Preface","slug":"preface","link":"#preface","children":[]},{"level":2,"title":"Relationship between Docker Daemon and Docker Registry","slug":"relationship-between-docker-daemon-and-docker-registry","link":"#relationship-between-docker-daemon-and-docker-registry","children":[]},{"level":2,"title":"Process of Docker Daemon Pulling Images","slug":"process-of-docker-daemon-pulling-images","link":"#process-of-docker-daemon-pulling-images","children":[{"level":3,"title":"Docker Image Manifest","slug":"docker-image-manifest","link":"#docker-image-manifest","children":[]},{"level":3,"title":"Summary of Process","slug":"summary-of-process","link":"#summary-of-process","children":[]}]},{"level":2,"title":"Docker Daemon Image Push Process","slug":"docker-daemon-image-push-process","link":"#docker-daemon-image-push-process","children":[]},{"level":2,"title":"An Essential Step Beyond the Process: User Authentication","slug":"an-essential-step-beyond-the-process-user-authentication","link":"#an-essential-step-beyond-the-process-user-authentication","children":[]},{"level":2,"title":"Getting Started","slug":"getting-started","link":"#getting-started","children":[{"level":3,"title":"1. Create Docker Image Manifest","slug":"_1-create-docker-image-manifest","link":"#_1-create-docker-image-manifest","children":[]},{"level":3,"title":"2. Upload Image Layers and Image Configuration to Docker Registry","slug":"_2-upload-image-layers-and-image-configuration-to-docker-registry","link":"#_2-upload-image-layers-and-image-configuration-to-docker-registry","children":[]},{"level":3,"title":"3. Upload image list","slug":"_3-upload-image-list","link":"#_3-upload-image-list","children":[]},{"level":3,"title":"4. Verify","slug":"_4-verify","link":"#_4-verify","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]},{"level":2,"title":"Appendix","slug":"appendix","link":"#appendix","children":[{"level":3,"title":"Step-by-Step Guide to Pulling Images from Docker Registry","slug":"step-by-step-guide-to-pulling-images-from-docker-registry","link":"#step-by-step-guide-to-pulling-images-from-docker-registry","children":[]}]}],"readingTime":{"minutes":8.69,"words":2607},"filePathRelative":"en/_posts/container/2021-12-05-how-to-build-image-手把手教你如何推镜像至-docker-registry.md","localizedDate":"December 5, 2021","autoDesc":true,"git":{"createdTime":1709961613000,"updatedTime":1710070397000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":2}]}}');export{L as comp,F as data};
