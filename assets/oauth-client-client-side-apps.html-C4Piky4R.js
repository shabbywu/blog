import{_ as c,o as u,c as d,f as e,g as t,t as m,p as v,j as _,h as g,r as l,i as n,w as b,e as s}from"./app-iv9USOQR.js";const A="/img/GitHub-OAuth-Device-Flow-Example.png",f={name:"DeviceFlow",props:{userCode:{type:String},verificationUri:{type:String}},data:function(){return{userCodePart:this.userCode.split("")}}},h=i=>(v("data-v-0ede2fba"),i=i(),_(),i),x={class:"DeviceFlow"},y={class:"px-3 mt-5 mx-auto"},w={class:"Box color-shadow-small"},k={class:"Box-body p-3 p-md-4"},O=h(()=>e("h2",{class:"text-center mb-4"},"Device Activation",-1)),C={class:"mb-4 text-center"},q={for:"user_code"},D=["href"],G={class:"d-flex flex-justify-between flex-items-center mb-4"},z=["value"],H=["value"],F=["value"],S=["value"],j=["value"],P=["value"],R=["value"],T=["value"],I=["value"],U=h(()=>e("div",{class:"col-sm-12 mt-2"},[e("p",{class:"text-small color-fg-muted mb-0 text-center"},[e("label",{for:"user_code"},"Enter the code in your web browser")])],-1));function B(i,p,a,o,r,ke){return u(),d("div",x,[e("div",y,[e("div",w,[e("div",k,[O,e("p",C,[e("label",q,[t("Visiting "),e("a",{href:a.verificationUri},m(a.verificationUri),9,D),t(" to continue")])]),e("div",G,[e("input",{type:"text",name:"user-code-0",id:"user-code-0",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},"aria-label":"User code 0","data-next":"user-code-1",readonly:"",value:i.userCodePart[0]},null,8,z),e("input",{type:"text",name:"user-code-1",id:"user-code-1",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[1]},null,8,H),e("input",{type:"text",name:"user-code-2",id:"user-code-2",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[2]},null,8,F),e("input",{type:"text",name:"user-code-3",id:"user-code-3",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[3]},null,8,S),e("input",{type:"text",name:"user-code-4",id:"user-code-4",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[4]},null,8,j),e("input",{type:"text",name:"user-code-5",id:"user-code-5",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[5]},null,8,P),e("input",{type:"text",name:"user-code-6",id:"user-code-6",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[6]},null,8,R),e("input",{type:"text",name:"user-code-7",id:"user-code-7",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[7]},null,8,T),e("input",{type:"text",name:"user-code-8",id:"user-code-8",class:"form-control js-user-code-field h1",maxlength:"1",style:{height:"2em","max-width":"2em","text-transform":"uppercase"},readonly:"",value:i.userCodePart[8]},null,8,I)]),U])])])])}const E=c(f,[["render",B],["__scopeId","data-v-0ede2fba"],["__file","DeviceFlow.vue"]]),$=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言")])],-1),J={href:"https://datatracker.ietf.org/doc/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},L=e("br",null,null,-1),N=e("em",null,"Client-Side Apps",-1),Z=s('<h2 id="客户端应用如何接入-github" tabindex="-1"><a class="header-anchor" href="#客户端应用如何接入-github"><span>客户端应用如何接入 GitHub？</span></a></h2><p>想要集成 GitHub 到你的平台、或者获取用户在 GitHub 的数据甚至是实现自动化工作流程，就需要使用 GitHub API。在调用 API 前需要完成用户对第三方平台的授权，这个流程就是 OAuth2.0。</p><h3 id="_1-创建-oauth-app" tabindex="-1"><a class="header-anchor" href="#_1-创建-oauth-app"><span>1. 创建 OAuth App</span></a></h3><p>在开始所有流程之前, 我们首先需要在 GitHub 创建 <strong>OAuth App</strong>, 这也是 OAuth2.0 流程中的客户端(<em>client</em>)。</p><details class="hint-container details"><summary>延伸阅读: OAuth2.0 中的角色</summary><p><strong>客户端(<em>client</em>)</strong> 是指在获得 <strong>资源所有者(<em>resource owner</em>)</strong> 授权后, 使用从 <strong>授权服务器(<em>authorization server</em>)</strong> 获取到的代表资源所有者身份的访问令牌访问存储在 <strong>资源服务器(<em>resource server</em>)</strong> 的受保护资源的应用程序。</p><p>以接入 GitHub 为例:<br> 客户端(<em>client</em>)即 GitHub OAuth App;<br> 资源所有者(<em>resource owner</em>)即任一 GitHub 用户;<br> 资源服务器(<em>resource server</em>)即 GitHub;<br> 授权服务器(<em>authorization server</em>)即 GitHub;</p></details>',5),M={href:"https://github.com/settings",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/settings/developers",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/settings/applications/new",target:"_blank",rel:"noopener noreferrer"},K=s('<blockquote><p>如果您之前没有创建过应用程序，此按钮会显示“Register a new application”。</p></blockquote><p>创建 OAuth App 需要填写应用的基本信息, 除了基本的应用名称(Application name), 应用主页(Homepage URL) 和应用描述(Application description)以外, 最重要的是一项是<strong>授权回调地址(<em>Authorization callback URL</em>)</strong>, 这也常被简称<strong>重定向地址(<em>Redirect URL</em>)</strong>。</p><h3 id="_2-重定向地址-redirect-url" tabindex="-1"><a class="header-anchor" href="#_2-重定向地址-redirect-url"><span>2. 重定向地址(<em>Redirect URL</em>)</span></a></h3><p><strong>重定向(<em>Redirect</em>)</strong> 是 授权服务器(<em>authorization server</em>) 对 客户端(<em>client</em>) 发起的 <strong>授权请求(<em>Authorization Request</em>)</strong> 进行鉴权的重要措施。主要用途是防止攻击者拦截授权代码或访问令牌的重定向攻击。</p><blockquote><p>由于客户端应用一般<strong>无后台服务器</strong>, 无法提供固定的重定向地址。因此 OAuth 2.0 允许 客户端(<em>client</em>) 将本地回环地址(如 127.0.0.1)设为重定向地址, 用户授权后 授权服务器(<em>authorization server</em>) 将用户重定向到客户端(<em>client</em>)提前运行在用户本地的服务。</p></blockquote><p>将重定向地址设置成 <code>http://127.0.0.1</code> 后即完成成功创建 GitHub OAuth App。</p><h3 id="_3-发起授权请求-authorization-request-获取资源访问令牌-access-token" tabindex="-1"><a class="header-anchor" href="#_3-发起授权请求-authorization-request-获取资源访问令牌-access-token"><span>3. 发起授权请求(Authorization Request) &amp; 获取资源访问令牌(Access Token)</span></a></h3>',7),Q=e("strong",null,[t("客户端应用("),e("em",null,"Client-Side Apps"),t(")")],-1),X=e("strong",null,[t("授权码("),e("em",null,"authorization code"),t(")")],-1),Y=e("strong",null,[t("服务端应用("),e("em",null,"Server-Side Apps"),t(")")],-1),ee=e("hr",null,null,-1),te=e("em",null,[e("strong",null,"Authorization Code Grant")],-1),ie=e("br",null,null,-1),ne={href:"https://datatracker.ietf.org/doc/html/rfc8628",target:"_blank",rel:"noopener noreferrer"},oe=e("em",null,[e("strong",null,"Device Authorization Grant")],-1),se=e("h2",{id:"device-authorization-grant",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#device-authorization-grant"},[e("span",null,"Device Authorization Grant")])],-1),ae=e("p",null,"OAuth 2.0 的 「Device Flow」扩展适用于能联网但无法或难以使用浏览器完成 「Authorization Code Flow」的设备，接下来以 GitHub 为接入场景展示如何使用 Device Flow 完成 OAuth 2.0 授权流程。",-1),re=e("h3",{id:"_1-开启-device-flow-认证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-开启-device-flow-认证"},[e("span",null,"1. 开启 Device Flow 认证")])],-1),le={href:"https://github.com/settings/developers",target:"_blank",rel:"noopener noreferrer"},ce=s('<p>只需要勾选「Enable Device Flow」即可开启 Device Flow 认证功能。</p><h3 id="_2-发起授权请求-authorization-request" tabindex="-1"><a class="header-anchor" href="#_2-发起授权请求-authorization-request"><span>2. 发起授权请求(Authorization Request)</span></a></h3><p><strong>发起授权请求(<em>Authorization Request</em>)</strong> 是 OAuth 2.0 授权框架的标准流程, 但是不同授权流程具体的实现并不一致。 <em><strong>Device Authorization Grant</strong></em> 的授权流程主要分为 2 个步骤:</p><ol><li>向 授权服务器(<em>authorization server</em>) 申请 <strong>设备验证码(<em>Device Code</em>)</strong> 和 <strong>用户验证码(<em>User Code</em>)</strong></li><li>引导用户前往 授权服务器(<em>authorization server</em>) 输入 <strong>用户验证码(<em>User Code</em>)</strong> 完成授权</li></ol>',4),ue={href:"https://datatracker.ietf.org/doc/html/rfc8628",target:"_blank",rel:"noopener noreferrer"},de=e("em",null,"Device Authorization Grant",-1),he=e("em",null,"授权请求",-1),pe=s(`<h3 id="_2-1-申请设备码-device-code" tabindex="-1"><a class="header-anchor" href="#_2-1-申请设备码-device-code"><span>2.1 申请设备码(<em>Device Code</em>)</span></a></h3><p>申请 <strong>设备码(<em>Device Code</em>)</strong> 需要 客户端(<em>client</em>) 向 授权服务器(<em>authorization server</em>) 提供的 API 发起 Post 请求, 以 GitHub 为例则是发起以下请求:</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code>POST /login/device/code HTTP/1.1
Host: github.com
Accept: application/json
 
client_id=3934c6721961da9062bf
&amp;scope=public_repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求涉及 2 个参数, 分别是:</p><ul><li>client_id: GitHub OAuth App 的客户端标识(Client ID)</li><li>scope: 需要用户授权的资源请求范围, public_repo 即需要授权访问 GitHub 中的公开仓库</li></ul><p>如果不指定请求头 <code>Accept</code>, 默认情况 GitHub 会以以下形式返回响应(其中的 device_code 已脱敏):</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>device_code=ABCDEF&amp;expires_in=900&amp;interval=5&amp;user_code=WDJB-MJHT&amp;verification_uri=https%3A%2F%github.com%2Flogin%2Fdevice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在指定请求头 <code>Accept: application/json</code> 后, GitHub 将会以 json 形式返回响应:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
	&quot;device_code&quot;: &quot;ABCDEF&quot;,
	&quot;user_code&quot;: &quot;WDJB-MJHT&quot;,
	&quot;verification_uri&quot;: &quot;https://github.com/login/device&quot;,
	&quot;expires_in&quot;: 899,
	&quot;interval&quot;: 5
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上返回参数的含义分别是:</p><ul><li>device_code: 设备验证码</li><li>user_code: 用户验证码</li><li>verification_uri: 用户输入用户验证码完成授权的地址</li><li>expires_in: 设备验证码和用户验证码的有效时间(单位, 秒)</li><li>interval: 客户端轮询授权服务器的最小时间间隔</li></ul><h3 id="_2-2-用户授权" tabindex="-1"><a class="header-anchor" href="#_2-2-用户授权"><span>2.2 用户授权</span></a></h3><p>向 授权服务器(<em>authorization server</em>) 发起授权请求换取 <em>设备验证码</em> 和 <em>用户验证码</em> 后, 将需要引导用户前往 <em>授权验证地址</em> 输入用户验证码。<br> 需要注意的是, OAuth 2.0 的 「Device Flow」扩展只约定了授权流程, 并未约定具体的展示层(UI)的实现细节，所以我们不妨参考其他系统已有的实现。</p><p>常见的客户端应用(<em>Client-Side Apps</em>)可分为 2 类:</p><ul><li>仅终端(terminal)的客户端应用</li><li>具有图形界面(GUI)的客户端应用</li></ul><hr>`,16),me={href:"https://github.com/cli/oauth",target:"_blank",rel:"noopener noreferrer"},ve=s(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>❯ myapp auth

First, copy your one-time code: WDJB-MJHT
Then visiting that URL: https://github.com/login/device to continue in the web browser...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>对于具有图形界面(GUI)的客户端应用, 可参考 GitHub Device Activation 页面实现展示层(UI):</p>`,3),_e=s('<hr><p>用户在授权页面正确输入用户验证码后将看到以下界面: <img src="'+A+`" alt="GitHub OAuth 授权示例" loading="lazy"></p><h3 id="_3-获取资源访问令牌-access-token" tabindex="-1"><a class="header-anchor" href="#_3-获取资源访问令牌-access-token"><span>3. 获取资源访问令牌(Access Token)</span></a></h3><p>点击绿色按钮确认授权后, 客户端(<em>client</em>)即可向授权服务器(<em>authorization server</em>)获取资源访问令牌。</p><p>与 <strong>Authorization Code Grant</strong> 授权流程不同的是, <strong>Device Authorization Grant</strong> 并未使用<em>重定向</em>回调来通知客户端(<em>client</em>) 用户已完成授权。 相对的, 使用「Device Flow」授权流程的客户端(<em>client</em>)需要定时<strong>轮询</strong>授权服务器(<em>authorization server</em>) 提供的 API 端点确认授权进度。</p><p>以 GitHub 为例, 则是如下所示的 POST 请求(其中的 device_code 已脱敏):</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code>POST /login/oauth/access_token HTTP/1.1
Host: github.com
Accept: application/json
 
device_code=ABCDEF
&amp;client_id=3934c6721961da9062bf
&amp;grant_type=urn:ietf:params:oauth:grant-type:device_code
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求涉及 3 个参数, 分别是:</p><ul><li>device_code: 以前申请到的设备验证码</li><li>client_id: GitHub OAuth App 的客户端标识(Client ID)</li><li>grant_type: 授权类型, 目前必须是 &quot;urn:ietf:params:oauth:grant-type:device_code&quot;</li></ul><blockquote><p>轮询该接口时需要注意必须控制轮询间隔大于或等于<strong>申请设备码</strong>接口返回的轮询间隔(interval), 否则将容易触发 API 速率限制。</p></blockquote><p>当用户确认授权后, 该接口将以以下形式返回响应(其中的 access_token 已脱敏):</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;access_token&quot;: &quot;gho_ABCDEFG&quot;,
    &quot;token_type&quot;: &quot;bearer&quot;,
    &quot;scope&quot;: &quot;public_repo&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>延伸阅读: <em>Device Authorization Grant</em> 的特点</summary><p>与其他授权类型相比, <em>Device Authorization Grant</em> 具有以下优势:</p><ul><li>用户使用可信设备完全授权确认, 可有效保护用户账号安全。</li><li>授权流程完全不需要 <strong>客户端密钥(<em>Client secret</em>)</strong>, 可避免客户端密钥的泄露。</li><li>无需服务器后台服务或域名服务。</li></ul></details><h3 id="_4-访问相关资源" tabindex="-1"><a class="header-anchor" href="#_4-访问相关资源"><span>4. 访问相关资源</span></a></h3>`,14),ge={href:"https://docs.github.com/en/rest/overview/api-versions",target:"_blank",rel:"noopener noreferrer"},be=e("em",null,"scope",-1),Ae=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结"},[e("span",null,"总结")])],-1),fe=e("p",null,"本文以接入 GitHub 平台为例, 详细讲述了客户端应用接入 OAuth2.0 授权框架涉及到的知识要点，主要介绍了 2 种授权流程, 分别是:",-1),xe=e("ol",null,[e("li",null,"Authorization Code Grant"),e("li",null,"Device Authorization Grant")],-1),ye=e("p",null,[t("两种授权流程各有优点, 但显然 "),e("strong",null,"Device Authorization Grant"),t(" 更适合客户端应用。")],-1),we=g({__name:"oauth-client-client-side-apps.html",setup(i){return(p,a)=>{const o=l("ExternalLinkIcon"),r=l("RouteLink");return u(),d("div",null,[$,e("p",null,[t("OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 "),e("a",J,[t("RFC 6749"),n(o)]),t(" 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。"),L,t(" 本文以接入 GitHub 授权作为使用场景，针对性介绍 客户端应用("),N,t(") 如何使用 OAuth2.0 完成用户授权验证。")]),Z,e("p",null,[t("创建 GitHub OAuth App 很简单, 首先在 "),e("a",M,[t("「Settings」"),n(o)]),t(" 页找到 "),e("a",V,[t("「Developer Settings」"),n(o)]),t(", 再点击 "),e("a",W,[t("「New OAuth App」"),n(o)]),t(" 即可创建。")]),K,e("p",null,[Q,t(" 获取到 "),X,t(" 后, 余下流程与 "),Y,t(" 完全一致, 读者可前往 "),n(r,{to:"/posts/2023/09/04/oauth-client-server-side-apps.html"},{default:b(()=>[t("OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证")]),_:1}),t(" 阅读相关的流程，这里不再重复讲述。")]),ee,e("p",null,[t("敏感的读者很可能已经意识到, "),te,t(" 从设计上就要求用户授权必须在浏览器中完成, 这导致在无浏览器的设备无法完成授权码流程。"),ie,t(" 为了让此类设备(如无图形用户界面的服务器、会议大屏甚至是智能音箱等)能实现用户授权, OAuth 2.0 提出了新的认证流程扩展 - "),e("a",ne,[oe,n(o)]),t("。")]),se,ae,re,e("p",null,[t("GitHub OAuth App 默认不打开 Device Flow 认证, 如果创建 OAuth App 时未勾选 「Enable Device Flow」, 则需要前往 "),e("a",le,[t("「Developer Settings」"),n(o)]),t(" 更新你的 OAuth App 配置。")]),ce,e("p",null,[t("完整的授权流程可以在 "),e("a",ue,[t("RFC 8628"),n(o)]),t(" 找到对应的详细说明, 接下来以 GitHub 为例演示如何发起 "),de,t(" 的 "),he,t("。")]),pe,e("p",null,[t("对于仅终端(terminal)的客户端应用, 可参考 GitHub 官方提供的 SDK "),e("a",me,[t("cli/oauth"),n(o)]),t(" 实现展示层(UI):")]),ve,n(E,{userCode:"WDJB-MJHT",verificationUri:"https://github.com/login/device"}),_e,e("p",null,[t("完成以上步骤后, 客户端已成功获取到代表用户授权的访问令牌, 可以通过 "),e("a",ge,[t("GitHub 接口文档"),n(o)]),t(" 中约定的方式访问授权范围("),be,t(")内资源。")]),Ae,fe,xe,ye])}}}),Ce=c(we,[["__file","oauth-client-client-side-apps.html.vue"]]),qe=JSON.parse('{"path":"/posts/2023/09/16/oauth-client-client-side-apps.html","title":"OAuth2.0 Client: 细说客户端应用如何使用 OAuth2.0 完成用户授权验证","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/common/2023-09-16-[OAuth Client] Client-Side Apps.md","date":"2023-09-16T00:00:00.000Z","title":"OAuth2.0 Client: 细说客户端应用如何使用 OAuth2.0 完成用户授权验证","sidebarDepth":2,"category":"基础技术","tags":["OAuth2.0"],"description":"前言 OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 RFC 6749 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。 本文以接入 GitHub 授权作为使用场景，针对性介绍 客户端应用(Client-Side Apps) 如何使用...","head":[["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2023/09/16/oauth-client-client-side-apps.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"OAuth2.0 Client: 细说客户端应用如何使用 OAuth2.0 完成用户授权验证"}],["meta",{"property":"og:description","content":"前言 OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 RFC 6749 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。 本文以接入 GitHub 授权作为使用场景，针对性介绍 客户端应用(Client-Side Apps) 如何使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.shabbywu.cn/img/GitHub-OAuth-Device-Flow-Example.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"OAuth2.0 Client: 细说客户端应用如何使用 OAuth2.0 完成用户授权验证"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"OAuth2.0"}],["meta",{"property":"article:published_time","content":"2023-09-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OAuth2.0 Client: 细说客户端应用如何使用 OAuth2.0 完成用户授权验证\\",\\"image\\":[\\"https://blog.shabbywu.cn/img/GitHub-OAuth-Device-Flow-Example.png\\"],\\"datePublished\\":\\"2023-09-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"客户端应用如何接入 GitHub？","slug":"客户端应用如何接入-github","link":"#客户端应用如何接入-github","children":[{"level":3,"title":"1. 创建 OAuth App","slug":"_1-创建-oauth-app","link":"#_1-创建-oauth-app","children":[]},{"level":3,"title":"2. 重定向地址(Redirect URL)","slug":"_2-重定向地址-redirect-url","link":"#_2-重定向地址-redirect-url","children":[]},{"level":3,"title":"3. 发起授权请求(Authorization Request) & 获取资源访问令牌(Access Token)","slug":"_3-发起授权请求-authorization-request-获取资源访问令牌-access-token","link":"#_3-发起授权请求-authorization-request-获取资源访问令牌-access-token","children":[]}]},{"level":2,"title":"Device Authorization Grant","slug":"device-authorization-grant","link":"#device-authorization-grant","children":[{"level":3,"title":"1. 开启 Device Flow 认证","slug":"_1-开启-device-flow-认证","link":"#_1-开启-device-flow-认证","children":[]},{"level":3,"title":"2. 发起授权请求(Authorization Request)","slug":"_2-发起授权请求-authorization-request","link":"#_2-发起授权请求-authorization-request","children":[]},{"level":3,"title":"2.1 申请设备码(Device Code)","slug":"_2-1-申请设备码-device-code","link":"#_2-1-申请设备码-device-code","children":[]},{"level":3,"title":"2.2 用户授权","slug":"_2-2-用户授权","link":"#_2-2-用户授权","children":[]},{"level":3,"title":"3. 获取资源访问令牌(Access Token)","slug":"_3-获取资源访问令牌-access-token","link":"#_3-获取资源访问令牌-access-token","children":[]},{"level":3,"title":"4. 访问相关资源","slug":"_4-访问相关资源","link":"#_4-访问相关资源","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":7.69,"words":2307},"filePathRelative":"_posts/common/2023-09-16-oauth-client-client-side-apps.md","localizedDate":"2023年9月16日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{Ce as comp,qe as data};
