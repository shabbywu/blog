import{_ as s,r as a,o as l,c as d,f as e,g as n,i as t,e as o}from"./app-iv9USOQR.js";const r={},c=o(`<h2 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍"><span>背景介绍</span></a></h2><p>最近有用户反馈线上运行的 nodejs 应用时区信息不对, 拿到的时间是 UTC 时区的时间。</p><div class="language-node line-numbers-mode" data-ext="node" data-title="node"><pre class="language-node"><code>&gt; Date()
Fri Aug 11 2023 06:26:02 GMT+0000 (Coordinated Universal Time)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>登录容器后排查，发现容器内的时区应该是东八区，不应该获取到 UTC 时区的时间。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>❯ date
Fri Aug 11 14:23:51 CST 2023
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 python 交叉验证时区信息均是东八区。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2023, 8, 11, 14, 27, 42, 544771)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),m=e("code",null,"date",-1),u=e("code",null,"datetime.now()",-1),p=e("br",null,null,-1),h=e("code",null,"nodejs",-1),v={href:"https://github.com/nodejs/node",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"排查历程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#排查历程"},[e("span",null,"排查历程")])],-1),g=e("h3",{id:"深入源码分析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#深入源码分析"},[e("span",null,"深入源码分析")])],-1),_={href:"https://github.com/nodejs/node/tree/main/deps/icu-small",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"datetime.datetime.now()",-1),T={href:"https://github.com/python/cpython/blob/main/Modules/_datetimemodule.c#L5120",target:"_blank",rel:"noopener noreferrer"},E=e("blockquote",null,[e("p",null,[e("strong",null,[n("显然，目前可以判断时区错误是 "),e("code",null,"ICU"),n(" 算法与 "),e("code",null,"localtime_r"),n(" 的行为不一致导致的。")])])],-1),y=e("code",null,"ICU",-1),A=e("code",null,"ICU",-1),Z={href:"https://github.com/nodejs/node/blob/main/deps/icu-small/source/i18n/timezone.cpp#L457",target:"_blank",rel:"noopener noreferrer"},C=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TimeZone* U_EXPORT2
TimeZone::detectHostTimeZone()
{
    ...
    // Get the timezone ID from the host.  This function should do
    // any required host-specific remapping; e.g., on Windows this
    // function maps the Windows Time Zone name to an ICU timezone ID.
    hostID = uprv_tzname(0);

    UnicodeString hostStrID(hostID, -1, US_INV);

    hostZone = createSystemTimeZone(hostStrID);
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I={href:"https://github.com/nodejs/node/blob/main/deps/icu-small/source/common/putil.cpp#L647",target:"_blank",rel:"noopener noreferrer"},z=o(`<p><code>uprv_timezone</code> 实现十分复杂, 有大量的 if-else 分支, 以下是摘取出来的有效代码。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>U_CAPI const char* U_EXPORT2
uprv_tzname(int n)
{
    // 获取软链指向的真实路径, 结果存在 gTimeZoneBuffer
    // TZDEFAULT = &quot;/etc/localtime&quot;
    char *ret = realpath(TZDEFAULT, gTimeZoneBuffer);
    if (ret != nullptr &amp;&amp; uprv_strcmp(TZDEFAULT, gTimeZoneBuffer) != 0) {
        // TZZONEINFOTAIL = &quot;/zoneinfo/&quot;
        int32_t tzZoneInfoTailLen = uprv_strlen(TZZONEINFOTAIL);
        // uprv_strstr 返回 TZZONEINFOTAIL 在 gTimeZoneBuffer 的起始位置
        const char *tzZoneInfoTailPtr = uprv_strstr(gTimeZoneBuffer, TZZONEINFOTAIL);
        if (tzZoneInfoTailPtr != nullptr) {
            tzZoneInfoTailPtr += tzZoneInfoTailLen;
            // 判断 /zoneinfo/ 后面的子串是否 Olson ID
            if (isValidOlsonID(tzZoneInfoTailPtr)) {
                return (gTimeZoneBufferPtr = tzZoneInfoTailPtr);
            }
        }
    }
    ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>终于排查到关键路径, 以上代码判断的<strong>核心逻辑</strong>是: 如果 <code>/etc/localtime</code> 是一个符号链接, 且链接指向的路径符合 <code>Olson ID</code> 的规则, 那么将会使用该 <code>Olson ID</code> 代表的时区, 否则将直接返回字符串, 代表未设置时区。</p>`,3),x={class:"hint-container tip"},U=e("p",{class:"hint-container-title"},"延伸阅读: 什么是 Olson Time Zone IDs",-1),k=e("p",null,'Olson ID（Olson Time Zone ID）是一个用于标识世界各个时区的唯一标识符。它通常以字符串的形式表示，例如："America/New_York"、"Europe/London" 等。这些标识符是由 "Olson Time Zone Database"（也称为 "tz database" 或 "IANA Time Zone Database"）维护和分发的。',-1),B={href:"https://docs.poly.com/bundle/trio-ag-5-9-3-AA/page/r2732735.html",target:"_blank",rel:"noopener noreferrer"},D=o(`<h3 id="重回案发现场" tabindex="-1"><a class="header-anchor" href="#重回案发现场"><span>重回案发现场</span></a></h3><p>通过查阅源码终于找到了问题的蛛丝马迹, 接下来我们重新返回案发现场确认导致 Bug 的真正原因。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@******:~## ls -lah /etc/localtime
lrwxrwxrwx 1 root root 27 Apr 21  2020 /etc/localtime -&gt; /usr/share/zoneinfo/Etc/UTC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到, <code>/etc/localtime</code> 的确是符号链接, 且链接的路径对应的是 <code>Etc/UTC</code>。但 <code>Etc/UTC</code> 并非 <code>Olson ID</code>, 因此 nodejs 无法正常判断系统的时区, 最后使用了 UTC 时区作为缺省值。</p><p>修复方式也很简单，只需要将 <code>/etc/localtime</code> 的符号链接指向代表东八区的 Olson ID 文件即可。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>## 修复软连
root@******:~## rm /etc/localtime
root@******:~## ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
## 验证修复
root@******:~## ls -lah /etc/localtime
lrwxrwxrwx 1 root root 27 Apr 21  2020 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Shanghai

## nodejs 里执行
&gt; Date()
Fri Aug 11 2023 14:46:22 GMT+0800 (China Standard Time)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此, 我们终于排查出 nodejs 获取到错误时区的原因是因为未正确设置 <code>/etc/localtime</code> 链接的路径。</p><p>但令人费解的事情出现了, 明明 <code>/etc/localtime</code> 指向的是 <code>/usr/share/zoneinfo/Etc/UTC</code>, 为什么<strong>操作系统和 python 都认为是东八区</strong>呢？</p><h2 id="案中案" tabindex="-1"><a class="header-anchor" href="#案中案"><span>案中案</span></a></h2>`,9),S={href:"https://linux.die.net/man/3/localtime_r",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"localtime_r",-1),w=e("code",null,"tzset",-1),j=e("code",null,"tzset",-1),F=o(`<div class="hint-container tip"><p class="hint-container-title">Linux man page - tzset(3)</p><p><strong>tzset()</strong> 函数从环境变量 TZ 初始化 <code>tzname</code> 变量。<br> 如果环境变量 TZ 不存在，<code>tzname</code> 变量将被初始化为本地时间的最佳近似值，该值由系统时区目录中的 <strong>tzfile(5)</strong> 格式文件 localtime 指定。(通常是 /etc/localtime)</p></div><p>我们不妨看下案发现场中, <code>/etc/localtime</code> 的内容究竟是什么。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@******:~## cat /etc/localtime
TZif2
     �Y^��      �p�ӽ����|@�;&gt;�Ӌ{��B���E&quot;�L���&lt;��fp���A|��R i�� ~��!I}�&quot;g� #)_�$G� %|&amp;&#39;e &amp;�^(G (�@q�~�pLMTCDTCSTTZif2
                                                                                                                    �����~6C)�����Y^������ �p�����ӽ������������|@�����;&gt;�����Ӌ{������B�������E&quot;�����L�������&lt;������fp�����������A|��R i�� ~��!I}�&quot;g� #)_�$G� %|&amp;&#39;e &amp;�^(G (�@q�~�pLMTCDTCST
CST-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然文件有一堆乱码, 但我们可以很清晰看到 <code>/etc/localtime</code> 指向的 <code>/usr/share/zoneinfo/Etc/UTC</code> 文件记录的时区是 <code>CST-8</code>, 也就是东八区。</p><p>所以, 这个奇怪的案发现场是虽然 <code>/etc/localtime</code> 软链指向了 <code>/usr/share/zoneinfo/Etc/UTC</code>, 但实际上 <code>/usr/share/zoneinfo/Etc/UTC</code> 的内容是 <code>Asia/Shanghai</code>。</p><blockquote><p>通过 md5sum 计算的摘要进一步确认问题的确如此。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@******:~## md5sum /usr/share/zoneinfo/Etc/UTC
1d458654143678b18662d1b5b4b5de9d  /usr/share/zoneinfo/Etc/UTC
root@******:~## md5sum /usr/share/zoneinfo/Asia/Shanghai 
1d458654143678b18662d1b5b4b5de9d  /usr/share/zoneinfo/Asia/Shanghai
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="符号链接引发的乌龙事件" tabindex="-1"><a class="header-anchor" href="#符号链接引发的乌龙事件"><span>符号链接引发的乌龙事件</span></a></h3><p>终于追查时区问题的根源 - <code>/usr/share/zoneinfo/Etc/UTC</code> 被意外覆盖了。<br> 但是谁会闲着无事将 <code>Asia/Shanghai</code> 的内容覆盖到 <code>Etc/UTC</code> 呢？显然这不是正常行为。<br> 带着最后的疑问我翻查了这个容器镜像的 <code>Dockerfile</code></p><div class="language-docker line-numbers-mode" data-ext="docker" data-title="docker"><pre class="language-docker"><code>FROM heroku/heroku:18.v27
...
## 设置时区
RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示, 这个容器镜像通过将 <code>/usr/share/zoneinfo/Asia/Shanghai</code> 复制到 <code>/etc/localtime</code> 来设置市区。<br> 但很不巧, <code>/etc/localtime</code> 是一个符号链接, 因此这个操作实际上是将 <code>/usr/share/zoneinfo/Asia/Shanghai</code> 复制到了 <code>/usr/share/zoneinfo/Etc/UTC</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>往往隐藏很深的问题, 根本原因就是这么简单 -- <strong>符号链接本质是一个指向另一个文件或目录的路径引用</strong>。<br> 当访问符号链接时，操作系统会根据路径引用跳转到链接指向的实际文件。</p><ul><li>设置时区需谨慎, 最通用的方案是设置 <code>TZ</code> 环境变量。</li><li>容器内覆盖文件需谨慎, 避免遇到符号链接导致出现预期外的行为。</li><li>使用符号链接需谨慎，读写符号链接实际上操作的是引用的</li></ul>`,14);function L(N,q){const i=a("ExternalLinkIcon");return l(),d("div",null,[c,e("blockquote",null,[e("p",null,[n("通过交叉验证暂时可以判断是 nodejs 获取时区的逻辑与 linux "),m,n(" 命令和 python "),u,n(" 函数不一致"),p,n(" 所以需要先确认 "),h,n(" 获取时区的逻辑，nodejs 的源码可以在 "),e("a",v,[n("nodejs/node"),t(i)]),n(" 项目中找到。")])]),b,g,e("p",null,[n("通过查阅 nodejs 的源码, 可以追踪到 nodejs 的时区选择是基于 "),e("a",_,[n("ICU, International Components for Unicode"),t(i)]),n("(一个跨平台的字符和时间处理库), 而 python 的 "),f,n(" 是通过 c 语言的 "),e("a",T,[n("localtime_r"),t(i)]),n(" 获取系统时间。")]),E,e("p",null,[n("因此需要再次深入 "),y,n(" 的算法排查, 以下是 "),A,n(" 时区探测主入口 "),e("a",Z,[n("TimeZone::detectHostTimeZone"),t(i)]),n(" 的部分代码摘录。")]),C,e("p",null,[n("显而易见, 时区探测的实现在 "),e("a",I,[n("uprv_timezone"),t(i)])]),z,e("div",x,[U,k,e("p",null,[n("完整的 "),e("a",B,[n("Olson Time Zone IDs"),t(i)]),n(" 列表看通过链接查看。")])]),D,e("p",null,[n("显然问题不是那么简单, 我们再次将目光移到 python 时间的底层实现 "),e("a",S,[n("localtime_r"),t(i)]),n(" 身上。 "),O,n(" 依赖 "),w,n(" 函数设置时区, 以下是 "),j,n(" 的注释(部分摘要)的翻译。")]),F])}const R=s(r,[["render",L],["__file","记一次时区异常问题排查思路和过程.html.vue"]]),G=JSON.parse('{"path":"/posts/2023/08/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%B6%E5%8C%BA%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF%E5%92%8C%E8%BF%87%E7%A8%8B.html","title":"记一次时区异常问题排查思路和过程","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/common/2023-08-11-记一次时区异常问题排查思路和过程.md","date":"2023-08-18T00:00:00.000Z","title":"记一次时区异常问题排查思路和过程","sidebarDepth":2,"category":"基础技术","tags":["linux"],"feed":{"description":"本文介绍了一次时区异常问题排查的思路和过程，并总结了一些经验教训。\\n"},"description":"背景介绍 最近有用户反馈线上运行的 nodejs 应用时区信息不对, 拿到的时间是 UTC 时区的时间。 登录容器后排查，发现容器内的时区应该是东八区，不应该获取到 UTC 时区的时间。 使用 python 交叉验证时区信息均是东八区。 通过交叉验证暂时可以判断是 nodejs 获取时区的逻辑与 linux date 命令和 python dateti...","head":[["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2023/08/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%97%B6%E5%8C%BA%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF%E5%92%8C%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"记一次时区异常问题排查思路和过程"}],["meta",{"property":"og:description","content":"背景介绍 最近有用户反馈线上运行的 nodejs 应用时区信息不对, 拿到的时间是 UTC 时区的时间。 登录容器后排查，发现容器内的时区应该是东八区，不应该获取到 UTC 时区的时间。 使用 python 交叉验证时区信息均是东八区。 通过交叉验证暂时可以判断是 nodejs 获取时区的逻辑与 linux date 命令和 python dateti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:published_time","content":"2023-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"记一次时区异常问题排查思路和过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"背景介绍","slug":"背景介绍","link":"#背景介绍","children":[]},{"level":2,"title":"排查历程","slug":"排查历程","link":"#排查历程","children":[{"level":3,"title":"深入源码分析","slug":"深入源码分析","link":"#深入源码分析","children":[]},{"level":3,"title":"重回案发现场","slug":"重回案发现场","link":"#重回案发现场","children":[]}]},{"level":2,"title":"案中案","slug":"案中案","link":"#案中案","children":[{"level":3,"title":"符号链接引发的乌龙事件","slug":"符号链接引发的乌龙事件","link":"#符号链接引发的乌龙事件","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":5.4,"words":1620},"filePathRelative":"_posts/common/2023-08-11-记一次时区异常问题排查思路和过程.md","localizedDate":"2023年8月18日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{R as comp,G as data};
