import{_ as i,r,o as l,c as a,f as e,g as o,i as t,e as s}from"./app-iv9USOQR.js";const d={},c=s('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>现在是容器化时代，不管是开发、测试还是运维，很少有人会不知道或不会用 Docker。使用 Docker 也很简单，很多时候启动容器无非就是执行 <code>docker run {your-image-name}</code>，而构建镜像也就是执行一句 <code>docker build dockerfile .</code>的事情。<br> 也许正是由于 <strong>Docker</strong> 对实现细节封装得过于彻底，有时候会觉得我们也许只是学会了<strong>如何使用<code>Docker CLI</code></strong> , 而并非明白 Docker 是如何运行的。<br> 笔者在编写『How To Build Images』时发现, 构建镜像和运行容器并非两条平行线。在介绍构建时或多或少会涉及运行时的内容，因此决定同时开展另一系列文章『How To Run Container』，而这是新系列的第一篇，『OCI 运行时规范』。</p>',2),u={id:"oci运行时规范",tabindex:"-1"},p={class:"header-anchor",href:"#oci运行时规范"},g={href:"https://github.com/opencontainers/runtime-spec/blob/master/spec.md",target:"_blank",rel:"noopener noreferrer"},h=s("<p>OCI运行时规范旨在指定容器的<strong>配置</strong>，<strong>执行环境</strong>和<strong>生命周期</strong>。</p><ul><li>定义如何描述容器所支持的平台和创建容器实例时需要的配置信息(<code>config.json</code>)，避免各<code>运行时实现</code>提出不同标准</li><li>定义容器的执行环节，确保容器内运行的应用程序在各<code>运行时实现</code>中具有一致的环境</li><li>定义容器的生命周期，确保容器在各<code>运行时实现</code>中具有一致的表现</li></ul>",2),m={id:"容器格式-文件系统捆绑包-filesystem-bundle",tabindex:"-1"},b={class:"header-anchor",href:"#容器格式-文件系统捆绑包-filesystem-bundle"},v={href:"https://github.com/opencontainers/runtime-spec/blob/master/bundle.md",target:"_blank",rel:"noopener noreferrer"},_=s(`<p>OCI运行时规范提出将容器编排为文件系统捆绑包(Filesystem Bundle)的形式, 即以某种方式组织一系列文件, 其中包含足以让合规的<code>运行时实现</code>能够启动容器的所有必要数据和元数据。<br> 一个标准的容器捆绑包包含了加载和运行容器所需的所有信息, 其中包括以下内容:</p><ul><li><code>config.json</code>: 包含容器的配置信息。该文件必须存储在捆绑包的根目录, 且必须被命名为 <strong>config.json</strong>。文件的详细内容见后文。</li><li>容器的根文件系统(<code>root filesystem</code>): 由 <code>root.path</code> 属性指定的目录（可选）。</li></ul><p>需要注意的是, 容器的运行时内容必须全部存储在本地文件系统上的单个目录中, 但该目录本身不属于捆绑包的一部分。<br> 换而言之, 在使用 <code>tar</code> 归档容器捆绑包时, 这些内容应该存储在归档文件的根目录中, 而不是嵌套在其他目录之下:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>.
├── config.json
└── $root.path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f={id:"运行时实现和容器生命周期",tabindex:"-1"},q={class:"header-anchor",href:"#运行时实现和容器生命周期"},I={href:"https://github.com/opencontainers/runtime-spec/blob/master/runtime.md",target:"_blank",rel:"noopener noreferrer"},O=s(`<h4 id="容器的作用域" tabindex="-1"><a class="header-anchor" href="#容器的作用域"><span>容器的作用域</span></a></h4><p><code>运行时实现</code>的实例必须能够对其创建的容器执行本规范中定义的操作，且不可操作其他容器，不管其他容器是使用相同的<code>运行时实现</code>或不同的<code>运行时实现</code>创建的。</p><h4 id="容器的状态" tabindex="-1"><a class="header-anchor" href="#容器的状态"><span>容器的状态</span></a></h4><p>使用 <code>State</code> 对象描述容器的状态, 将该对象序列化成 JSON 时, 格式如下所示:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;ociVersion&quot;: &quot;0.2.0&quot;,
    &quot;id&quot;: &quot;oci-container1&quot;,
    &quot;status&quot;: &quot;running&quot;,
    &quot;pid&quot;: 4422,
    &quot;bundle&quot;: &quot;/containers/redis&quot;,
    &quot;annotations&quot;: {
        &quot;myKey&quot;: &quot;myValue&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器状态包含以下几个属性:</p><ul><li><strong>ociVersion</strong> (string, REQUIRED): 描述该运行时遵守的 「OCI运行时规范」 版本</li><li><strong>id</strong> (string, REQUIRED): 描述容器的 ID。该值在该主机上的所有容器中必须是唯一的，但不需要在主机之间保证唯一性。</li><li><strong>status</strong> (string, REQUIRED): 描述该容器的运行状态, 必须在以下各值中取值: <ul><li><strong>creating</strong>: 容器正在创建 (生命周期中的第2步)</li><li><strong>created</strong>: 运行时已执行完创建操作 (生命周期中的第2步), 此时容器进程处于运行状态但又未执行用户指定的程序</li><li><strong>running</strong>: 容器进程已执行用户指定的程序, 且尚未推出 (生命周期中的第5步之后)</li><li><strong>stopped</strong>: 容器进程已退出 (生命周期中的第7步) 可由运行时实现定义额外的状态, 但不可与上述定义的运行时状态重复。</li></ul></li><li><strong>pid</strong> (int, 对于 linux 以外的操作系统为可选值, 对于 linux 系统的 created, running 阶段是必须值): 描述容器进程的 ID。对于在运行时命名空间(namespace)中执行的钩子(hooks), 该值是运行时实现所感知的 pid。对于在容器命名空间(namespace)中执行的钩子(hooks), 该值是容器所感知到的 pid。</li><li><strong>bundle</strong> (string, REQUIRED): 描述容器的捆绑包目录的绝对路径。(提供此信息是为了让使用者可以在主机上找到容器的配置和根文件系统。)</li><li><strong>annotations</strong> (map, OPTIONAL): 描述与容器关联的注解。如果没有提供注解, 则该属性可以不存在或为空。 除此之外, 运行时实现可以往 State 对象添加额外的属性。</li></ul><h4 id="容器的生命周期" tabindex="-1"><a class="header-anchor" href="#容器的生命周期"><span>容器的生命周期</span></a></h4><p>容器的生命周期依据时间轴的先后顺序描述了从创建容器到销毁之间发生的事件。</p><ol><li>传递捆绑包位置和容器唯一标识作为参数, 调用由遵循 OCI 标准的 <code>运行时实现</code> 实现的 <strong>create</strong> 指令。</li><li><code>运行时实现</code>根据 <code>config.json</code> 中的配置创建容器的运行时环境, 如果无法创建该环境, 则必须生成<strong>错误(Error)</strong>。该步骤仅负责创建 <code>config.json</code> 中请求的资源, 但并不运行用户指定的程序。在此不走之后, 任何对 <code>config.json</code> 的更新都不会影响到容器实例。</li><li><code>运行时实现</code>调用 <strong>prestart</strong> 钩子, 如果调用时出现异常, 则必须生成<strong>错误(Error)</strong>, 并停止容器, 并直接跳转至步骤12继续执行。</li><li><code>运行时实现</code>调用 <strong>createRuntime</strong> 钩子, 如果调用时出现异常, 则必须生成<strong>错误(Error)</strong>, 并停止容器, 并直接跳转至步骤12继续执行。</li><li><code>运行时实现</code>调用 <strong>createContainer</strong> 钩子, 如果调用时出现异常, 则必须生成<strong>错误(Error)</strong>, 并停止容器, 并直接跳转至步骤12继续执行。</li><li>传递步骤1中使用的容器唯一标识作为参数, 调用由遵循 OCI 标准的 <code>运行时实现</code> 提供的 <strong>start</strong> 指令。</li><li><code>运行时实现</code>调用 <strong>startContainer</strong> 钩子, 如果调用时出现异常, 则必须生成<strong>错误(Error)</strong>, 并停止容器, 并直接跳转至步骤12继续执行。</li><li><code>运行时实现</code>开始运行 <strong>process</strong> 指定的用户指定的程序。</li><li><code>运行时实现</code>调用 <strong>poststart</strong> 钩子, 如果调用时出现异常, 则必须记录<strong>警告(Warning)</strong>, 但继续执行生命周期, 就像该钩子执行成功一样。</li><li>容器进程退出。</li><li>传递步骤1中使用的容器唯一标识作为参数, 调用由遵循 OCI 标准的 <code>运行时实现</code> 提供的 <strong>delete</strong> 指令。</li><li>必须通过回退在创建阶段(步骤2)中执行的步骤来销毁容器。</li><li><code>运行时实现</code>调用 <strong>poststop</strong> 钩子, 如果调用时出现异常, 则必须记录<strong>警告(Warning)</strong>, 但继续执行生命周期, 就像该钩子执行成功一样。</li></ol><h4 id="oci运行时标准操作" tabindex="-1"><a class="header-anchor" href="#oci运行时标准操作"><span>OCI运行时标准操作</span></a></h4><p>OCI运行时规范定义了 5 个标准操作, 规范了与容器之间的交互流程。</p><ul><li>Query State: <code>state &lt;container-id&gt;</code> 根据指定的容器ID查询容器的状态。</li><li>Create: <code>create &lt;container-id&gt; &lt;path-to-bundle&gt;</code> 根据容器捆绑包路径和容器ID创建容器实例</li><li>Start: <code>start &lt;container-id&gt;</code> 执行用户指定的程序。</li><li>Kill: <code>kill &lt;container-id&gt; &lt;signal&gt;</code> 将指定的信号发送到容器进程。</li><li>Delete: <code>delete &lt;container-id&gt;</code> 删除容器以及在<strong>create</strong>步骤中创建的资源。</li></ul>`,13),y={id:"容器的配置",tabindex:"-1"},E={class:"header-anchor",href:"#容器的配置"},k={href:"https://github.com/opencontainers/runtime-spec/blob/master/config.md",target:"_blank",rel:"noopener noreferrer"},j=s(`<p>配置文件必须包含对容器实施标准操作所需要的数据和元数据，其中包括容器要运行的进程，需要注入的环境变量，要使用的沙盒功能等等。 大体上, 容器配置可划分为 8 个组成要素, 分别是: <code>规范版本(ociVersion)</code>, <code>根文件系统配置(root)</code>, <code>挂载点配置(mounts)</code>, <code>进程信息(process)</code>, <code>主机名(hostname)</code>, <code>钩子(hooks)</code> , <code>注解(annotations)</code> 和 <code>平台相关配置</code>。</p><h4 id="规范版本-ociversion-string-required" tabindex="-1"><a class="header-anchor" href="#规范版本-ociversion-string-required"><span>规范版本 ociVersion (string, REQUIRED)</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;ociVersion&quot;: &quot;0.1.0&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),C={href:"https://semver.org/spec/v2.0.0.html",target:"_blank",rel:"noopener noreferrer"},x=s(`<h4 id="根文件系统配置-root-object-optional" tabindex="-1"><a class="header-anchor" href="#根文件系统配置-root-object-optional"><span>根文件系统配置 root (object, OPTIONAL)</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    // For POSIX platforms
    &quot;root&quot;: {
        &quot;path&quot;: &quot;rootfs&quot;,
        &quot;readonly&quot;: true
    },
    // For Windows
    &quot;root&quot;: {
        &quot;path&quot;: &quot;\\\\\\\\?\\\\Volume{ec84d99e-3f02-11e7-ac6c-00155d7682cf}\\\\&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根文件系统配置 (root) 指定容器的根文件系统, 包含以下字段:</p><ul><li><strong>path</strong> (string, REQUIRED): 描述容器的根文件系统的路径(在宿主机的位置)。 <ul><li>对于 POSIX platforms 平台, <strong>path</strong> 可以是根文件系统的相对路径或绝对路径。例如, 容器捆绑包位于 <code>/to/bundel/</code> 以及根文件系统位于 <code>/to/bundel/rootfs</code>, 那么 path 的值可以为 <code>/to/bundel/rootfs</code> 或 <code>rootfs</code>。</li><li>对于 Windows 平台, <code>path</code> 必须是数据卷的 GUID 路径。</li></ul></li><li><strong>readonly</strong> (bool, OPTIONAL): 描述根文件系统在容器内是否可写的, 默认值是 false。 <ul><li>对于 Windows 平台, 该值必须缺省或为 false。</li></ul></li></ul><h4 id="挂载点配置-mounts-array-of-objects-optional" tabindex="-1"><a class="header-anchor" href="#挂载点配置-mounts-array-of-objects-optional"><span>挂载点配置 mounts (array of objects, OPTIONAL)</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    // For POSIX platforms
    &quot;mounts&quot;: [
        {
            &quot;destination&quot;: &quot;/tmp&quot;,
            &quot;type&quot;: &quot;tmpfs&quot;,
            &quot;source&quot;: &quot;tmpfs&quot;,
            &quot;options&quot;: [&quot;nosuid&quot;,&quot;strictatime&quot;,&quot;mode=755&quot;,&quot;size=65536k&quot;]
        }
    ],
    // For Windows
    &quot;mounts&quot;: [
        {
            &quot;destination&quot;: &quot;C:\\\\folder-inside-container&quot;,
            &quot;source&quot;: &quot;C:\\\\folder-on-host&quot;,
            &quot;options&quot;: [&quot;ro&quot;]
        }
    ],

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂载点配置 (mounts) 指定容器除了根目录以外的挂载点。<code>运行时实现</code> 必须按 <code>mounts</code> 的声明顺序进行挂载。<code>mounts</code> 对象包含以下字段:</p>`,7),R=e("li",null,[e("strong",null,"destination"),o(" (string, REQUIRED): 描述挂载点的目标位置(容器内的路径), 该值必须是绝对路径。")],-1),T=e("li",null,[e("strong",null,"source"),o(" (string, OPTIONAL): 一个设备名称，或者是需要挂载到容器的文件和目录的名称。对于 "),e("code",null,"bind"),o(" 类型的挂载, 该值必须是绝对路径或是相对容器捆绑包的相对路径(与 "),e("strong",null,"root.path"),o(" 一样)。")],-1),D=e("strong",null,"options",-1),w={href:"https://man7.org/linux/man-pages/man8/mount.8.html",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,[o("对于 Windows 平台: "),e("code",null,"运行时实现"),o(" 必须支持 "),e("code",null,"ro"),o(" 选项, 表示只读(read-only)。")],-1),N=e("li",null,[o("当 options 中包含 "),e("code",null,"bind"),o(" 或 "),e("code",null,"rbind"),o(" 时, 表示这是 "),e("code",null,"bind"),o(" 类型的挂载。")],-1),P=e("li",null,[e("strong",null,"type"),o(" (string, OPTIONAL): 被挂载的文件系统的类型。 "),e("ul",null,[e("li",null,[o("对于 Linux 平台: 内核支持的文件系统类型声明在 "),e("code",null,"/proc/filesystems"),o("。对于 "),e("code",null,"bind"),o(" 类型的挂载, "),e("strong",null,"type"),o(" 值将被忽略, 按照业界习惯, 该值常被设置为 "),e("strong",null,"none"),o("。")])])],-1),L=s('<h4 id="进程信息-process-object-optional" tabindex="-1"><a class="header-anchor" href="#进程信息-process-object-optional"><span>进程信息 process (object, OPTIONAL)</span></a></h4><p>进程信息 (process) 指定容器执行的进程，在 <code>运行时实现</code> 调用 <strong>start</strong> 操作时, 该值是必须提供的。<code>process</code> 对象包含以下字段:</p><ul><li><strong>terminal</strong> (bool, OPTIONAL): 描述能否将终端连接到进程, 默认值为 false。</li><li><strong>consoleSize</strong> (object, OPTIONAL): 描述终端控制台的大小(以字符为单位)。 <ul><li><strong>height</strong> (uint, REQUIRED)</li><li><strong>width</strong> (uint, REQUIRED)</li></ul></li><li><strong>cwd</strong> (string, REQUIRED):</li><li><strong>env</strong> (array of strings, OPTIONAL)</li><li><strong>args</strong> (array of strings, OPTIONAL)</li><li><strong>commandLine</strong> (string, OPTIONAL)</li><li><strong>user</strong> (object, REQUIRED): 描述执行进程的用户身份。 <ul><li><strong>uid</strong> (int, REQUIRED): 在容器命名空间中的用户ID。</li><li><strong>gid</strong> (int, REQUIRED): 在容器命名空间中的组ID。</li><li><strong>umask</strong> (int, OPTIONAL): 用户掩码。</li><li><strong>additionalGids</strong> (array of ints, OPTIONAL): 额外给进程添加的在容器命名空间中的组ID。</li></ul></li></ul><h4 id="主机名-hostname-string-optional" tabindex="-1"><a class="header-anchor" href="#主机名-hostname-string-optional"><span>主机名 hostname (string, OPTIONAL)</span></a></h4><p>主机名 (hostname) 指定容器内进程所能看到的主机名。</p><h4 id="钩子-hooks-object-optional" tabindex="-1"><a class="header-anchor" href="#钩子-hooks-object-optional"><span>钩子 hooks (object, OPTIONAL)</span></a></h4><p>钩子 (hooks) 允许用户指定在各生命周期事件前后运行特定的程序。<code>运行时实现</code> 必须按钩子 (hooks) 的声明顺序依序执行，同时在调用钩子时必须通过 <code>标准输入(stdin)</code> 传递容器的状态。OCI运行时规范共定义 6 个钩子，分别是:</p><ul><li><strong>prestart</strong> (DEPRECATED)：prestart 必须在 <strong>start</strong> 操作被调用之后, 但在用户指定的程序执行之前被调用(且需要在<code>运行时实现</code>的命名空间中杯调用)。<strong>prestart</strong> 定义的钩子包含以下参数:</li><li><strong>createRuntime</strong>: createRuntime 必须在 <strong>create</strong> 操作被调用时, 但在 <code>pivot_root</code> 或等效的操作执行之前被调用(且需要在<code>运行时实现</code>的命名空间中被调用)。</li><li><strong>createContainer</strong>: createContainer 必须在 <strong>create</strong> 操作被调用时, 且在<strong>createRuntime</strong>被调用后，但在 <code>pivot_root</code> 或等效的操作执行之前被调用(且需要在容器的命名空间中被调用)。</li><li><strong>startContainer</strong>: startContainer 必须作为 <strong>start</strong> 操作的一部分被执行, 且需要在执行用户指定的进程时被调用。</li><li><strong>poststart</strong>: poststart 必须在执行用户指定的进程之后, 但是 <strong>start</strong> 操作返回前被调用。</li><li><strong>poststop</strong>: poststop 操作必须在容器被删除, 但是 <strong>delete</strong> 操作返回前被调用。</li></ul><p>以上所有钩子对象具有同样的结构定义:</p>',9),S=e("strong",null,"path",-1),U={href:"https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html",target:"_blank",rel:"noopener noreferrer"},Q=e("code",null,"path",-1),V=e("strong",null,"args",-1),B={href:"https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"execv's argv",-1),H=e("strong",null,"env",-1),W={href:"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_01",target:"_blank",rel:"noopener noreferrer"},Z=e("code",null,"environ",-1),z=e("li",null,[e("strong",null,"timeout"),o(" (int, OPTIONAL): 描述执行该钩子的等待超时时间，如果设置，则必须为正数。")],-1),J=s(`<h4 id="注解-annotations-object-optional" tabindex="-1"><a class="header-anchor" href="#注解-annotations-object-optional"><span>注解 annotations (object, OPTIONAL)</span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;annotations&quot;: {
        &quot;com.example.gpu-cores&quot;: &quot;2&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解 (annotations) 用于存储容器相关的元数据。注解的键必须为非空字符串，注解的键必须为字符串。</p><h4 id="平台相关配置" tabindex="-1"><a class="header-anchor" href="#平台相关配置"><span>平台相关配置</span></a></h4>`,4),K={href:"https://github.com/opencontainers/runtime-spec/blob/master/config-linux.md",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/opencontainers/runtime-spec/blob/master/config-windows.md",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/opencontainers/runtime-spec/blob/master/config-solaris.md",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/opencontainers/runtime-spec/blob/master/config-vm.md",target:"_blank",rel:"noopener noreferrer"},$=s(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;linux&quot;: {
        &quot;namespaces&quot;: [
            {
                &quot;type&quot;: &quot;pid&quot;
            }
        ]
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于篇幅有限, 暂时不再继续罗列平台之间的差异化配置，感兴趣的读者可以从传送门翻过去看规范原文，或者等我后继空闲继续翻译整理。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文主要翻译了OCI运行时规范的主要内容, 方便对容器技术感兴趣的童鞋快速了解OCI运行时规范涉及的领域。由于精力有限暂且整理到这里，后继有空再整理平台差异化相关的配置项。</p>`,4);function Y(ee,oe){const n=r("ExternalLinkIcon");return l(),a("div",null,[c,e("h2",u,[e("a",p,[e("span",null,[e("a",g,[o("OCI运行时规范"),t(n)])])])]),h,e("h3",m,[e("a",b,[e("span",null,[e("a",v,[o("容器格式 -- 文件系统捆绑包(Filesystem Bundle)"),t(n)])])])]),_,e("h3",f,[e("a",q,[e("span",null,[e("a",I,[o("运行时实现和容器生命周期"),t(n)])])])]),O,e("h3",y,[e("a",E,[e("span",null,[e("a",k,[o("容器的配置"),t(n)])])])]),j,e("p",null,[o("规范版本(ociVersion) 必须是 "),e("a",C,[o("SemVer v2.0.0"),t(n)]),o(" 格式的字符串, 表示当前容器捆绑包所支持的 OCI 运行时规范版本。")]),x,e("ul",null,[R,T,e("li",null,[D,o(" (array of strings, OPTIONAL): 挂载文件系统时的挂载参数。 "),e("ul",null,[e("li",null,[o("对于 Linux 平台: 支持的 options 选项详见 "),e("a",w,[o("mount(8)"),t(n)]),o("。")]),A,N])]),P]),L,e("ul",null,[e("li",null,[S,o(" (string, REQUIRED): 同 "),e("a",U,[o("IEEE Std 1003.1-2008 execv's "),Q,t(n)]),o(", 但必须为绝对路径。")]),e("li",null,[V,o(" (array of strings, OPTIONAL): 同 "),e("a",B,[o("IEEE Std 1003.1-2008 "),F,t(n)]),o(" 中的定义。")]),e("li",null,[H,o(" (array of strings, OPTIONAL): 同 "),e("a",W,[o("IEEE Std 1003.1-2008 "),Z,t(n)]),o(" 中的定义")]),z]),J,e("p",null,[o("目前OCI运行时规范主要针对 4 类平台做了差异化设定, 分别为: "),e("a",K,[o("linux"),t(n)]),o(", "),e("a",X,[o("windows"),t(n)]),o(", "),e("a",G,[o("solaris"),t(n)]),o(", "),e("a",M,[o("vm"),t(n)]),o("。对于不同的平台, 直接使用平台名称为 Key 配置对应的配置即可。例如:")]),$])}const te=i(d,[["render",Y],["__file","how-to-run-container-oci-运行时规范.html.vue"]]),se=JSON.parse('{"path":"/posts/2021/03/31/how-to-run-container-oci-%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A7%84%E8%8C%83.html","title":"How To Run Container:OCI 运行时规范","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/container/2021-03-31-How To Run Container-OCI 运行时规范.md","date":"2021-03-31T00:00:00.000Z","title":"How To Run Container:OCI 运行时规范","sidebarDepth":2,"category":"容器技术","tags":["OCI","docker"],"description":"前言 现在是容器化时代，不管是开发、测试还是运维，很少有人会不知道或不会用 Docker。使用 Docker 也很简单，很多时候启动容器无非就是执行 docker run {your-image-name}，而构建镜像也就是执行一句 docker build dockerfile .的事情。 也许正是由于 Docker 对实现细节封装得过于彻底，有时候...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://blog.shabbywu.cn/en/posts/2021/03/31/how-to-run-container-oci-%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2021/03/31/how-to-run-container-oci-%E8%BF%90%E8%A1%8C%E6%97%B6%E8%A7%84%E8%8C%83.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"How To Run Container:OCI 运行时规范"}],["meta",{"property":"og:description","content":"前言 现在是容器化时代，不管是开发、测试还是运维，很少有人会不知道或不会用 Docker。使用 Docker 也很简单，很多时候启动容器无非就是执行 docker run {your-image-name}，而构建镜像也就是执行一句 docker build dockerfile .的事情。 也许正是由于 Docker 对实现细节封装得过于彻底，有时候..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"OCI"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2021-03-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Run Container:OCI 运行时规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"OCI运行时规范","slug":"oci运行时规范","link":"#oci运行时规范","children":[{"level":3,"title":"容器格式 -- 文件系统捆绑包(Filesystem Bundle)","slug":"容器格式-文件系统捆绑包-filesystem-bundle","link":"#容器格式-文件系统捆绑包-filesystem-bundle","children":[]},{"level":3,"title":"运行时实现和容器生命周期","slug":"运行时实现和容器生命周期","link":"#运行时实现和容器生命周期","children":[]},{"level":3,"title":"容器的配置","slug":"容器的配置","link":"#容器的配置","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":11.85,"words":3556},"filePathRelative":"_posts/container/2021-03-31-how-to-run-container-oci-运行时规范.md","localizedDate":"2021年3月31日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{te as comp,se as data};
