import{_ as r,r as o,o as s,c as l,f as e,g as t,i as n,e as a}from"./app-iv9USOQR.js";const u="/img/GitHub-OAuth-Authrozation-Example.png",c={},p=e("h2",{id:"前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#前言"},[e("span",null,"前言")])],-1),h={href:"https://datatracker.ietf.org/doc/html/rfc6749",target:"_blank",rel:"noopener noreferrer"},m=e("br",null,null,-1),d=e("em",null,"Server-Side Apps",-1),b=a('<h2 id="服务端应用如何接入-github" tabindex="-1"><a class="header-anchor" href="#服务端应用如何接入-github"><span>服务端应用如何接入 GitHub？</span></a></h2><p>想要集成 GitHub 到你的平台、或者获取用户在 GitHub 的数据甚至是实现自动化工作流程，就需要使用 GitHub API。在调用 API 前需要完成用户对第三方平台的授权，这个流程就是 OAuth2.0。</p><h3 id="_1-创建-oauth-app" tabindex="-1"><a class="header-anchor" href="#_1-创建-oauth-app"><span>1. 创建 OAuth App</span></a></h3><p>在开始所有流程之前, 我们首先需要在 GitHub 创建 <strong>OAuth App</strong>, 这也是 OAuth2.0 流程中的客户端(<em>client</em>)。</p><details class="hint-container details"><summary>延伸阅读: OAuth2.0 中的角色</summary><p><strong>客户端(<em>client</em>)</strong> 是指在获得 <strong>资源所有者(<em>resource owner</em>)</strong> 授权后, 使用从 <strong>授权服务器(<em>authorization server</em>)</strong> 获取到的代表资源所有者身份的访问令牌访问存储在 <strong>资源服务器(<em>resource server</em>)</strong> 的受保护资源的应用程序。</p><p>以接入 GitHub 为例:<br> 客户端(<em>client</em>)即 GitHub OAuth App;<br> 资源所有者(<em>resource owner</em>)即任一 GitHub 用户;<br> 资源服务器(<em>resource server</em>)即 GitHub;<br> 授权服务器(<em>authorization server</em>)即 GitHub;</p></details>',5),g={href:"https://github.com/settings",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/settings/developers",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/settings/applications/new",target:"_blank",rel:"noopener noreferrer"},v=a('<blockquote><p>如果您之前没有创建过应用程序，此按钮会显示“Register a new application”。</p></blockquote><p>创建 OAuth App 需要填写应用的基本信息, 除了基本的应用名称(Application name), 应用主页(Homepage URL) 和应用描述(Application description)以外, 最重要的是一项是<strong>授权回调地址(<em>Authorization callback URL</em>)</strong>, 这也常被简称<strong>重定向地址(<em>Redirect URL</em>)</strong>。</p><h3 id="_2-规划重定向地址-redirect-url" tabindex="-1"><a class="header-anchor" href="#_2-规划重定向地址-redirect-url"><span>2. 规划重定向地址(<em>Redirect URL</em>)</span></a></h3><p><strong>重定向(<em>Redirect</em>)</strong> 是 授权服务器(<em>authorization server</em>) 对 客户端(<em>client</em>) 发起的 <strong>授权请求(<em>Authorization Request</em>)</strong> 进行鉴权的重要措施。主要用途是防止攻击者拦截授权代码或访问令牌的重定向攻击。</p><p>为了安全起见, <strong>重定向地址(Redirect URL)</strong> 应当尽量使用 HTTPS 地址以防止在授权过程中遭受被中间人拦截泄露 <strong>授权码(<em>authorization code</em>)</strong>。</p><details class="hint-container details"><summary>延伸阅读: 什么是授权码(<em>authorization code</em>)</summary><p>在 OAuth2.0 中 <strong>授权码(<em>authorization code</em>)</strong> 有两层含义:</p><ol><li>字面上的含义是由 授权服务器(<em>authorization server</em>) 签发给 客户端(<em>client</em>), 供其换取访问令牌的临时代码。</li><li>另一层含义是指 OAuth 2.0 中定义的最主要的授权流程 - <em><strong>Authorization Code Grant</strong></em>。</li></ol></details><p>设置重定向地址后即完成成功创建 GitHub OAuth App。</p><h3 id="_3-发起授权请求-authorization-request" tabindex="-1"><a class="header-anchor" href="#_3-发起授权请求-authorization-request"><span>3. 发起授权请求(Authorization Request)</span></a></h3><p>创建 OAuth 应用后, GitHub 会给每个 OAuth 应用分配唯一的客户端标识(Client ID) 和客户端密钥(Client secret), 接下来即可向授权服务器(<em>authorization server</em>)发起授权请求 -- 即<strong>将用户重定向到授权服务器</strong>。</p><p>重定向到授权服务的 URL 需要按照一定规则构造, 以 GitHub 为例则需要构造如下的 URL:</p><blockquote><p>https://github.com/login/oauth/authorize?<br> client_id=3934c6721961da9062bf<br> &amp;redirect_uri=https%3A%2F%2Fblog.shabbywu.cn<br> &amp;scope=public_repo &amp;state=WkZRRNbeEMZEpBxRLopS</p></blockquote><p>URL中涉及 4 个参数, 分别是:</p><ul><li>client_id: GitHub OAuth App 的客户端标识(Client ID)</li><li>redirect_uri: 用户授权后将重定向到该页面</li><li>scope: 需要用户授权的资源请求范围, public_repo 即需要授权访问 GitHub 中的公开仓库</li><li>state: 描述重定向前应用状态的字符串, 授权服务器会将 state 原样返回到授权成功后跳转的 redirect_uri</li></ul><p>正确拼接 URL 后打开即可看到如下所示的界面: <img src="'+u+`" alt="GitHub OAuth 授权示例" loading="lazy"></p><h3 id="_4-获取资源访问令牌-access-token" tabindex="-1"><a class="header-anchor" href="#_4-获取资源访问令牌-access-token"><span>4. 获取资源访问令牌(Access Token)</span></a></h3><p>点击绿色按钮确认授权后，将从 GitHub 重定向到 redirect_uri, 此时重定向的 URL 中的 params 部分会有 2 个重要的参数, 分别是:</p><ul><li>code: 授权码(<em>authorization code</em>), 客户端(<em>client</em>) 需要用 授权码(<em>authorization code</em>) 从 授权服务器(<em>authorization server</em>) 换取访问令牌</li><li>state: 描述重定向前应用状态的字符串, 与构造的授权地址中的 state 一致</li></ul><p>以下是一个示例地址(其中的 code 已脱敏):</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://blog.shabbywu.cn/?   
code=ABCDEFG   
&amp;state=WkZRRNbeEMZEpBxRLopS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>授权服务器(<em>authorization server</em>) 将浏览器重定向到重定向地址后, 客户端(<em>client</em>) 所在的服务器即可发起令牌交换请求, 以 GitHub 为例, 则是如下所示的 POST 请求(其中的 code 与 client_secret 已脱敏):</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code>POST /oauth/access_token HTTP/1.1
Host: github.com
 
code=ABCDEFG
&amp;client_id=3934c6721961da9062bf
&amp;client_secret=ABCDEFG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>授权服务器(<em>authorization server</em>) 验证 <strong>客户端标识(<em>Client ID</em>)</strong> 和 <strong>客户端密钥(<em>Client secret</em>)</strong> 后将返回访问令牌(可能还有可选的刷新令牌, 但并非所有授权服务器都实现该特性), 以 GitHub 为例将返回如下所示的响应(其中的 access_token 已脱敏):</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>{
    &quot;access_token&quot;: &quot;gho_ABCDEFG&quot;,
    &quot;token_type&quot;: &quot;bearer&quot;,
    &quot;scope&quot;: &quot;public_repo&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>延伸阅读: <em>Authorization Code Grant</em> 的特点</summary><p>与其他授权类型相比, <em>Authorization Code Grant</em> 具有以下优势:</p><ul><li>授权服务器(<em>authorization server</em>) 确认授权后将重定向到与 客户端(<em>client</em>) 事先约定的重定向地址, 这个步骤完成了授权码的交付。使用 HTTPS 作为重定向地址可以有效保护授权码不被恶意软件拦截。</li><li>客户端(<em>client</em>) 只在服务器后台向 授权服务器(<em>authorization server</em>) 换取访问令牌, 可避免客户端密钥和访问令牌的泄露。</li></ul></details><h3 id="_5-访问相关资源" tabindex="-1"><a class="header-anchor" href="#_5-访问相关资源"><span>5. 访问相关资源</span></a></h3>`,25),O={href:"https://docs.github.com/en/rest/overview/api-versions",target:"_blank",rel:"noopener noreferrer"},y=e("em",null,"scope",-1),f=e("h2",{id:"总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#总结"},[e("span",null,"总结")])],-1),k=e("p",null,"本文以接入 GitHub 平台为例, 详细讲述了服务端应用接入 OAuth2.0 授权框架涉及到的知识要点，主要步骤可概括成 4 个步骤:",-1),G=e("ol",null,[e("li",null,"在资源服务器中注册客户端(创建 OAuth App)"),e("li",null,"引导资源所有者前往授权服务器授权客户端访问指定范围内的资源"),e("li",null,"用户授权后, 客户端使用授权码向授权服务器交换访问令牌"),e("li",null,"使用访问令牌从资源服务器获取相应的资源")],-1);function z(H,R){const i=o("ExternalLinkIcon");return s(),l("div",null,[p,e("p",null,[t("OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 "),e("a",h,[t("RFC 6749"),n(i)]),t(" 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。"),m,t(" 本文以接入 GitHub 授权作为使用场景，针对性介绍服务端应用("),d,t(")如何使用 OAuth2.0 完成用户授权验证。")]),b,e("p",null,[t("创建 GitHub OAuth App 很简单, 首先在 "),e("a",g,[t("「Settings」"),n(i)]),t(" 页找到 "),e("a",_,[t("「Developer Settings」"),n(i)]),t(", 再点击 "),e("a",A,[t("「New OAuth App」"),n(i)]),t(" 即可创建。")]),v,e("p",null,[t("完成以上步骤后, 客户端已成功获取到代表用户授权的访问令牌, 可以通过 "),e("a",O,[t("GitHub 接口文档"),n(i)]),t(" 中约定的方式访问授权范围("),y,t(")内资源。")]),f,k,G])}const C=r(c,[["render",z],["__file","oauth-client-server-side-apps.html.vue"]]),q=JSON.parse('{"path":"/posts/2023/09/04/oauth-client-server-side-apps.html","title":"OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/common/2023-09-04-[OAuth Client] Server-Side Apps.md","date":"2023-09-04T00:00:00.000Z","title":"OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证","sidebarDepth":2,"category":"基础技术","tags":["OAuth2.0"],"description":"前言 OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 RFC 6749 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。 本文以接入 GitHub 授权作为使用场景，针对性介绍服务端应用(Server-Side Apps)如何使用 O...","head":[["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2023/09/04/oauth-client-server-side-apps.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证"}],["meta",{"property":"og:description","content":"前言 OAuth2.0 是行业标准的用户授权框架，针对不同的使用场景提供了多种授权方式。关于 OAuth2.0 认证框架的所有细节都可以在 RFC 6749 找到对应的详细说明，然而阅读规范并不是了解 OAuth2.0 工作流程的最佳方式。 本文以接入 GitHub 授权作为使用场景，针对性介绍服务端应用(Server-Side Apps)如何使用 O..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.shabbywu.cn/img/GitHub-OAuth-Authrozation-Example.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"OAuth2.0"}],["meta",{"property":"article:published_time","content":"2023-09-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OAuth2.0 Client: 细说服务端应用如何使用 OAuth2.0 完成用户授权验证\\",\\"image\\":[\\"https://blog.shabbywu.cn/img/GitHub-OAuth-Authrozation-Example.png\\"],\\"datePublished\\":\\"2023-09-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"服务端应用如何接入 GitHub？","slug":"服务端应用如何接入-github","link":"#服务端应用如何接入-github","children":[{"level":3,"title":"1. 创建 OAuth App","slug":"_1-创建-oauth-app","link":"#_1-创建-oauth-app","children":[]},{"level":3,"title":"2. 规划重定向地址(Redirect URL)","slug":"_2-规划重定向地址-redirect-url","link":"#_2-规划重定向地址-redirect-url","children":[]},{"level":3,"title":"3. 发起授权请求(Authorization Request)","slug":"_3-发起授权请求-authorization-request","link":"#_3-发起授权请求-authorization-request","children":[]},{"level":3,"title":"4. 获取资源访问令牌(Access Token)","slug":"_4-获取资源访问令牌-access-token","link":"#_4-获取资源访问令牌-access-token","children":[]},{"level":3,"title":"5. 访问相关资源","slug":"_5-访问相关资源","link":"#_5-访问相关资源","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":5.51,"words":1654},"filePathRelative":"_posts/common/2023-09-04-oauth-client-server-side-apps.md","localizedDate":"2023年9月4日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{C as comp,q as data};
