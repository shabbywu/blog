import{_ as r,r as o,o as i,c as l,f as e,g as n,i as s,e as a}from"./app-iv9USOQR.js";const d={},c=e("p",null,[n("自动化生成文档的工具有很多, 这里介绍的是一款基于 "),e("strong",null,"Swagger/OpenAPI 2.0"),n(" 规范的 API 文档自动化生成工具: "),e("strong",null,"drf-yasg"),n("。")],-1),g=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"提示"),e("p",null,[n("如果你不清楚什么是 "),e("strong",null,"Swagger/OpenAPI 2.0"),n(" 规范, 没关系, 简单使用这个工具并不需要完全掌握这些规范。")])],-1),p={id:"drf-yasg-yet-another-swagger-generator",tabindex:"-1"},h={class:"header-anchor",href:"#drf-yasg-yet-another-swagger-generator"},u={href:"https://drf-yasg.readthedocs.io/en/stable/readme.html",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[n("API 文档自动化生成的工具有很多种, 其中大多数都是通过文档注释进行文档自动化生成的(如 APIDOC)。"),e("br"),n(" 然而 drf-yasg 选择了另辟蹊径, 它通过复用 "),e("strong",null,"Serializers"),n(" 以及 "),e("strong",null,"Models"),n(" 来自动化生成 API 文档。")],-1),_=e("blockquote",null,[e("p",null,[n("得益于 drf-yasg 的这项特性, 维护文档注释的工作量将会降低至微乎其微。"),e("br"),n(" 试想一下, 假若需要调整 API 请求参数或返回值结构, 在 coding 时必然会调整对应的 Serializers 或 Models, 这时候自动生成的文档也会同步更新, 这就避免了文档落后于代码的问题。")])],-1),v={id:"drf-yasg-的使用方法",tabindex:"-1"},f={class:"header-anchor",href:"#drf-yasg-的使用方法"},b={href:"https://drf-yasg.readthedocs.io/en/stable/readme.html#usage",target:"_blank",rel:"noopener noreferrer"},y=a(`<p>该节参考官方文档编写, 同时针对部分细节做了更详细的解释。</p><h3 id="_0-安装" tabindex="-1"><a class="header-anchor" href="#_0-安装"><span>0. 安装</span></a></h3><p>在安装前, 建议先了解一下 drf-yasg 对 drf/django/python 各版本的兼容性。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>## drf-yasg 兼容性状况
-   Django Rest Framework: 3.8, 3.9, 3.10, 3.11
-   Django: 1.11, 2.2, 3.0
-   Python: 2.7, 3.6, 3.7, 3.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于兼容的项目, 直接安装 drf-yasg 即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip install -U drf-yasg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-快速开始" tabindex="-1"><a class="header-anchor" href="#_1-快速开始"><span>1. 快速开始</span></a></h3><p>首先, 在 django settings 里的 <code>INSTALLED_APPS</code> 添加 <code>drf_yasg</code>。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>## IN YOUR settings.py
INSTALLED_APPS = [
   ...
   &#39;drf_yasg&#39;,
   ...
]
随后, 在 django urls 里添加对应的 url路由

## IN YOUR urls.py
...
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

...

schema_view = get_schema_view(
    ## 具体定义详见 [Swagger/OpenAPI 规范](https://swagger.io/specification/#infoObject)
    openapi.Info(
        title=&quot;Snippets API&quot;,
        default_version=&#39;v1&#39;,
        description=&quot;Test description&quot;,
        terms_of_service=&quot;https://www.google.com/policies/terms/&quot;,
        contact=openapi.Contact(email=&quot;contact@snippets.local&quot;),
        license=openapi.License(name=&quot;BSD License&quot;),
    ),
    ## public 表示文档完全公开, 无需针对用户鉴权
    public=True,
    ## 可以传递 drf 的 BasePermission
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    url(r&#39;^swagger(?P&lt;format&gt;\\.json|\\.yaml)$&#39;, schema_view.without_ui(cache_timeout=0), name=&#39;schema-spec&#39;),
    url(r&#39;^swagger/$&#39;, schema_view.with_ui(&#39;swagger&#39;, cache_timeout=0), name=&#39;schema-swagger-ui&#39;),
    url(r&#39;^redoc/$&#39;, schema_view.with_ui(&#39;redoc&#39;, cache_timeout=0), name=&#39;schema-redoc&#39;),
    ...
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>drf-yasg 提供 4 种默认路径(endpoints), 分别为:</p><ul><li><code>/swagger.json</code>, JSON 格式的 API 定义</li><li><code>/swagger.yaml</code>, YAML 格式的 API 定义</li><li><code>/swagger/</code>, 基于原生 swagger-ui 样式的前端页面</li><li><code>/redoc/</code>, 基于 ReDoc 样式的前端页面</li></ul><h3 id="_2-常用配置" tabindex="-1"><a class="header-anchor" href="#_2-常用配置"><span>2. 常用配置</span></a></h3>`,12),w=e("strong",null,"drf-yasg",-1),P={href:"https://drf-yasg.readthedocs.io/en/stable/readme.html#configuration",target:"_blank",rel:"noopener noreferrer"},I=a('<blockquote><p>如果仅需简单应用, 参考 <code>1. 快速开始</code> 配置后即可通过对应的 <code>endpoints</code> 访问到自动生成的 API 文档。</p></blockquote><h4 id="a-get-schema-view-的配置" tabindex="-1"><a class="header-anchor" href="#a-get-schema-view-的配置"><span>a. <code>get_schema_view</code> 的配置</span></a></h4><p>函数 <strong>get_schema_view</strong> 的作用是返回自动生成 API 文档的视图类, 该函数接受以下参数:</p>',3),A=e("strong",null,"info",-1),k={href:"https://swagger.io/specification/#infoObject",target:"_blank",rel:"noopener noreferrer"},S=e("strong",null,"drf-yasg",-1),q=e("code",null,"DEFAULT_INFO",-1),O=a("<li><strong>url</strong>: 项目API的基础地址, 如果缺省, 则根据视图所在的位置进行推导。</li><li><strong>patterns</strong>: 自定义的 urlpatterns, 该参数直接透传至 SchemaGenerator。</li><li><strong>urlconf</strong>: 描述从哪个文件获取路由配置, 缺省值是 &quot;urls&quot;, 该参数直接透传至 SchemaGenerator。</li><li><strong>public</strong>: 描述API文档是否公开, 如果未 <code>False</code>, 则仅返回当前用户具有权限的接口(endpoints)的 API 文档。</li><li><strong>validators</strong>: 用于校验自动生成的 Schema 的校验器, 目前仅支持 <code>ssv</code> 和 <code>flex</code>。</li><li><strong>generator_class</strong>: 自定义 OpenAPI schema 生成器类, 该类应该继承自 <code>OpenAPISchemaGenerator</code></li><li><strong>authentication_classes</strong>: 用于 schema view 进行登录认证的类</li><li><strong>permission_classes</strong>: 用于 schema view 进行权限校验的类</li>",8),x=a('<h4 id="b-schemaview-的配置" tabindex="-1"><a class="header-anchor" href="#b-schemaview-的配置"><span>b. <code>SchemaView</code> 的配置</span></a></h4><p>通过函数 <strong>get_schema_view</strong> 可以获取对应的 <strong>SchemaView</strong>, 调用该类的 <strong>with_ui</strong> 或 <strong>without_ui</strong> 方法可生成对应的<strong>视图函数</strong>, 将其添加进 <strong>urlpatterns</strong> 即可访问到自动生成的 API 文档。</p><ul><li><strong>SchemaView.with_ui(renderer, cache_timeout, cache_kwargs)</strong>: 返回使用指定 UI 渲染器的视图函数, 可选的 UI 渲染器有: <code>swagger</code>, <code>redoc</code>。</li><li><strong>SchemaView.without_ui(cache_timeout, cache_kwargs)</strong>: 返回无 UI 的视图函数, 该函数可以返回 json/yaml 格式的 swagger 文档。</li></ul><p>以上两个函数均支持通过 <code>cache_timeout</code> 或 <code>cache_kwargs</code> 配置缓存参数, 详见下一节。</p><h3 id="_3-缓存" tabindex="-1"><a class="header-anchor" href="#_3-缓存"><span>3. 缓存</span></a></h3><p>由于 schema 通常在服务运行期间不会发生改变, 因此 <strong>drf-yasg</strong> 使用 django 内置的 <code>cache_page</code> 实现开箱即用的缓存功能, 只需要配置对应的参数即可启用, 对应参数解释如下:</p><ul><li><strong>cache_timeout</strong>: 用于指定缓存的生存时间</li><li><strong>cache_kwargs</strong>: 用于传递 <strong>cache_page</strong> 允许接受的非位置参数, 如 <code>cache</code>(指定 cache backend), <code>key_prefix</code>(缓存 key 的前缀) 等等, 详见 django 官方文档。</li></ul><blockquote><p>需要注意的是, 由于 <strong>drf-yasg</strong> 支持针对不同用户返回不一样的 API 文档(通过<strong>public</strong>、<strong>authentication_classes</strong>、<strong>permission_classes</strong>等参数配置), 因此对于不同用户(通过HTTP 请求头中的 <strong>Cookie</strong> 和 <strong>Authorization</strong> 进行区分), 会在内存中分别进行缓存。</p></blockquote><h3 id="_4-校验文档有效性" tabindex="-1"><a class="header-anchor" href="#_4-校验文档有效性"><span>4. 校验文档有效性</span></a></h3><p>为保证自动生成文档的有效性, 可以通过在 <strong>get_schema_view</strong> 中设置 <code>validators</code> 参数开启校验自动化生成文档是否符合 OpenAPI2.0 规范的功能。</p><blockquote><p>该功能可能会降低文档生成的效率, 鉴于 schema 通常在服务运行期间不会发生改变, 该选项可仅在本地开发期间开启。</p></blockquote><h3 id="_5-代码自动生成" tabindex="-1"><a class="header-anchor" href="#_5-代码自动生成"><span>5. 代码自动生成</span></a></h3>',12),T=e("strong",null,"不同语言",-1),j={href:"https://github.com/swagger-api/swagger-codegen",target:"_blank",rel:"noopener noreferrer"},N=e("h2",{id:"drf-yasg-自动生成-api-文档的流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#drf-yasg-自动生成-api-文档的流程"},[e("span",null,"drf-yasg 自动生成 API 文档的流程")])],-1),D={href:"https://www.coreapi.org/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://djangoadventures.com/coreapi-vs-openapi/",target:"_blank",rel:"noopener noreferrer"},C=e("br",null,null,-1),Y=e("strong",null,"drf-yasg",-1),L=e("br",null,null,-1),U=a(`<div class="language-plantuml line-numbers-mode" data-ext="plantuml" data-title="plantuml"><pre class="language-plantuml"><code><img src="https://www.plantuml.com/plantuml/svg/bLJbUkCm4FplfzZZfCpCp8o_-Ydosj5NM_99SdFWU_TRHKxZCWKNPcT74oqPoxJDqoGeBh6nVBHT11a5X1LAmhOKzePY5m9Ry3S0-fk9qTuOtiIKtTnHUDP73Uex8UFPu5yGANqBmKnEeMNG-3D7OsTzbCLCI9zQwQPGXk3ImSnf6zTD6w0njNeHX6WPRpwNcH543cAKg9bLkXPYnFB4WZ3GqtEOCKcyVTTcfwQdfpuR13ES9KctSQ2xKAsar0TPtaW4f-hYIyGnmgbYLMayqegZCOLVMJXnY7kcXBI6FkNfSrJMouhrJfve311o5qFJ08sI8tqoAhb3RHv2d7GAJdpU8rGXk9B6mPjgCDCgpFbzyCkMiaT2tj89Ldb7MgKLyhws-8AZqNGK5jjfbc2AqZ9dY3MqJ2H-_rPJ90WrgI1L6Y7NISQiHIqNwuvrROCb1kltdW4cApMptJW5WQ9DS4JWOJvbP1gDINkuQQeC6cXRYD9tC3AEyo2mgj0zFRwRLcnpR7zvUdvLEQZxY01xUZo9ZZWUvzqQU0v7diFBAZn4zpOMqcJ8dtZdjCNY6FLoRfMtidEmRolzYw0or6rY8C8obp5jX8m9e3GqD5Ju6oZCKhIe3ItQ4hP91VU3UtgUD5Eh_dYNEvbAqvEAK75ZjVl438Hek1OPqQzQmhBOFBEAoSW42Fwt-XePPWocZGGfUTXHvvskyDRW8vo7GwKpJf7dMjZVQnW9AHoMNwfIw5XYfVI4P1UwxPck01fjhYKG8tSrmPhYkIkOxLwy0TN84FMJ6hzgwOR14oGDuV04IiITqyE3mUlb_JrtYwRC0kdhdap4JPlyRb-mmHAzv6do7m00
"></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>drf-yasg</strong> 自动生成文档的大致流程如上, 由于如何通过 <strong>inspector</strong> 从 <strong>Endpoint</strong> 解析出 <strong>RequestBodyParameters</strong>、<strong>QueryParameters</strong> 以及 <strong>ResponseSchema</strong> 的流程涉及到较多的 <strong>Swagger/OpenAPI</strong> 规范的知识, 这里的流程图省略了这些实现细节。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>建议感兴趣的读者先了解 OpenAPI2.0 规范, 再阅读对应的实现源码。</p></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>得益于 <strong>drf-yasg</strong> 选择了基于 drf-Serializer 和 Model 生成 API 文档, 不但复用了代码组件, 还降低了额外维护一份代码文档的开销成本，虽然文档生成流程中存在写瑕疵, 但瑕不掩瑜, <strong>drf-yasg</strong> 在目前还是 django/drf API 文档自动生成的最好用的工具库。</p>`,5);function Z(F,z){const t=o("ExternalLinkIcon");return i(),l("div",null,[c,g,e("h2",p,[e("a",h,[e("span",null,[e("a",u,[n("drf-yasg"),s(t)]),n(" - Yet another Swagger generator")])])]),m,_,e("h2",v,[e("a",f,[e("span",null,[e("a",b,[n("drf-yasg 的使用方法"),s(t)])])])]),y,e("p",null,[n("这一节简单介绍 "),w,n(" 的配置参数，其他参数的详细解释建议阅读"),e("a",P,[n("官方文档"),s(t)])]),I,e("ul",null,[e("li",null,[A,n(": Swagger API Info 对象, 具体定义详见 "),e("a",k,[n("Swagger/OpenAPI 规范"),s(t)]),n(", 如果缺省, "),S,n(" 默认会用 "),q,n(" 进行填充。")]),O]),x,e("p",null,[n("使用 Swagger/OpenAPI 规范生成文档的好处之一, 就是能通过 API 文档自动生成 "),T,n(" 的 SDK，该功能由 "),e("strong",null,[e("a",j,[n("swagger-codegen"),s(t)])]),n(" 提供。")]),N,e("p",null,[n("虽然在 Django Rest Framework 3.7 已经内置了自动生成 OpenAPI 2.0 Schema 的功能, 但是这个功能实际上是基于 "),e("a",D,[n("CoreAPI"),s(t)]),n(" 标准, 就功能和社区生态(周边工具)而言, 目前是远不如 "),e("a",R,[n("OpenAPI"),s(t)]),n("。"),C,n(" 因此, "),Y,n(" 基于 drf 的路由生成器(EndpointEnumerator), 用 OpenAPI 2.0 规范重新实现了一遍文档生成的流程。"),L,n(" 鉴于文档生成的流程比较复杂, 这里笔者尝试将核心的流程用流程图记录如下。")]),U])}const E=r(d,[["render",Z],["__file","python-auto-doc-for-drf.html.vue"]]),M=JSON.parse('{"path":"/posts/2020/04/15/python-auto-doc-for-drf.html","title":"drf-yasg:一款自动生成API文档的工具介绍","lang":"zh-CN","frontmatter":{"draft":false,"permalinkPattern":"/posts/:year/:month/:day/:slug.html","type":"post","filePathRelative":"_posts/python/2020-04-15-python-auto-doc-for-drf.md","date":"2020-04-15T00:00:00.000Z","title":"drf-yasg:一款自动生成API文档的工具介绍","sidebarDepth":5,"category":"python","tags":["python","docs","drf-yasg"],"description":"自动化生成文档的工具有很多, 这里介绍的是一款基于 Swagger/OpenAPI 2.0 规范的 API 文档自动化生成工具: drf-yasg。 提示 如果你不清楚什么是 Swagger/OpenAPI 2.0 规范, 没关系, 简单使用这个工具并不需要完全掌握这些规范。 drf-yasg - Yet another Swagger generat...","head":[["meta",{"property":"og:url","content":"https://blog.shabbywu.cn/posts/2020/04/15/python-auto-doc-for-drf.html"}],["meta",{"property":"og:site_name","content":"个人技术文章分享"}],["meta",{"property":"og:title","content":"drf-yasg:一款自动生成API文档的工具介绍"}],["meta",{"property":"og:description","content":"自动化生成文档的工具有很多, 这里介绍的是一款基于 Swagger/OpenAPI 2.0 规范的 API 文档自动化生成工具: drf-yasg。 提示 如果你不清楚什么是 Swagger/OpenAPI 2.0 规范, 没关系, 简单使用这个工具并不需要完全掌握这些规范。 drf-yasg - Yet another Swagger generat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T07:10:47.000Z"}],["meta",{"property":"article:author","content":"shabbywu"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"docs"}],["meta",{"property":"article:tag","content":"drf-yasg"}],["meta",{"property":"article:published_time","content":"2020-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-24T07:10:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"drf-yasg:一款自动生成API文档的工具介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-24T07:10:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"shabbywu\\",\\"url\\":\\"https://github.com/shabbywu\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://blog.shabbywu.cn/atom.xml","title":"个人技术文章分享 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://blog.shabbywu.cn/feed.json","title":"个人技术文章分享 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://blog.shabbywu.cn/rss.xml","title":"个人技术文章分享 RSS Feed"}]]},"headers":[{"level":2,"title":"drf-yasg - Yet another Swagger generator","slug":"drf-yasg-yet-another-swagger-generator","link":"#drf-yasg-yet-another-swagger-generator","children":[]},{"level":2,"title":"drf-yasg 的使用方法","slug":"drf-yasg-的使用方法","link":"#drf-yasg-的使用方法","children":[{"level":3,"title":"0. 安装","slug":"_0-安装","link":"#_0-安装","children":[]},{"level":3,"title":"1. 快速开始","slug":"_1-快速开始","link":"#_1-快速开始","children":[]},{"level":3,"title":"2. 常用配置","slug":"_2-常用配置","link":"#_2-常用配置","children":[]},{"level":3,"title":"3. 缓存","slug":"_3-缓存","link":"#_3-缓存","children":[]},{"level":3,"title":"4. 校验文档有效性","slug":"_4-校验文档有效性","link":"#_4-校验文档有效性","children":[]},{"level":3,"title":"5. 代码自动生成","slug":"_5-代码自动生成","link":"#_5-代码自动生成","children":[]}]},{"level":2,"title":"drf-yasg 自动生成 API 文档的流程","slug":"drf-yasg-自动生成-api-文档的流程","link":"#drf-yasg-自动生成-api-文档的流程","children":[]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"readingTime":{"minutes":6.18,"words":1853},"filePathRelative":"_posts/python/2020-04-15-python-auto-doc-for-drf.md","localizedDate":"2020年4月15日","autoDesc":true,"git":{"createdTime":1708758647000,"updatedTime":1708758647000,"contributors":[{"name":"shabbywu","email":"shabbywu@tencent.com","commits":1}]}}');export{E as comp,M as data};
